{
	"info": {
		"_postman_id": "c34f99f6-dc0e-44dd-86fa-b6a7ef5c6fde",
		"name": "Project3Endpoints",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Template Requests (All Requests)",
			"item": [
				{
					"name": "UserController",
					"item": [
						{
							"name": "http://localhost:8080/user",
							"id": "baa38da7-fd27-4cc3-b43f-77f4f5ed5327",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Authorization}}",
										"type": "text"
									}
								],
								"url": "http://localhost:8080/user"
							},
							"response": []
						},
						{
							"name": "http://localhost:8080/user",
							"id": "acdee35a-9243-484d-8464-c3ab1e8790f2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Authorization}}",
										"type": "text"
									}
								],
								"url": "http://localhost:8080/user"
							},
							"response": []
						},
						{
							"name": "http://localhost:8080/user",
							"id": "e62be6f0-5abc-4bc4-bc1c-f168fa117561",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Authorization}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"string\",\r\n  \"password\": \"string\",\r\n  \"firstName\": \"string\",\r\n  \"lastName\": \"string\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/user"
							},
							"response": []
						},
						{
							"name": "http://localhost:8080/user/deactivate",
							"id": "9748e52d-3358-41df-91bc-f7cc041000d2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Authorization}}",
										"type": "text"
									}
								],
								"url": "http://localhost:8080/user/deactivate"
							},
							"response": []
						},
						{
							"name": "http://localhost:8080/user/deactivateUser",
							"id": "f27c28c3-3f58-4d5f-9898-19960dca875b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Authorization}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userId\": 4,\r\n    \"email\": \"string\",\r\n    \"firstName\": \"string\",\r\n    \"lastName\": \"string\",\r\n    \"active\": true,\r\n    \"admin\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/user/deactivateUser"
							},
							"response": []
						}
					],
					"id": "a4326274-1628-4713-9067-3f69f5d71a3d"
				},
				{
					"name": "AuthController",
					"item": [
						{
							"name": "(testuser@gmail.com) http://localhost:8080/auth/login (testuser@gmail.com) Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d65ba736-d351-4b25-9796-7e32b859411a",
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.globals.set(\"Authorization\", pm.response.headers.get(\"Authorization\"));\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "819e56c6-fc19-4c61-9876-f75c027548bc",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"testuser@gmail.com\",\r\n    \"password\": \"password\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/auth/login"
							},
							"response": []
						},
						{
							"name": "http://localhost:8080/auth/register",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6a3fcd1d-4719-41bb-825f-c6f021c6fcce",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "44294417-b358-4a71-bc50-edacb9c59cf8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"string\",\r\n  \"password\": \"string\",\r\n  \"firstName\": \"string\",\r\n  \"lastName\": \"string\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/auth/register"
							},
							"response": []
						},
						{
							"name": "http://localhost:8080/auth/forgot-password",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ce12d84d-d756-4718-a7f1-81cd138a39ed",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "779db9a5-55e1-4be2-a6f6-5b9548270ba6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"testuser@gmail.com\",\r\n    \"password\": \"password\",\r\n  \"firstName\": \"testerson\",\r\n  \"lastName\": \"Usertown\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/auth/forgot-password"
							},
							"response": []
						},
						{
							"name": "http://localhost:8080/auth/reset-password/{token}",
							"id": "70a11599-add9-4b24-93a8-77612aac03bd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "http://localhost:8080/auth/reset-password/{{Authorization}}"
							},
							"response": []
						},
						{
							"name": "http://localhost:8080/auth/reset-password/{token}",
							"id": "d446247a-bfab-4d7b-9dba-43f8ebee69cb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"url": "http://localhost:8080/auth/reset-password/"
							},
							"response": []
						},
						{
							"name": "http://localhost:8080/auth",
							"id": "4d00611e-bf47-45ce-88d1-bb6bfa5eb028",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Authorization}}",
										"type": "text"
									}
								],
								"url": "http://localhost:8080/auth"
							},
							"response": []
						},
						{
							"name": "http://localhost:8080/auth/logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "013e39b9-de82-4332-a3eb-50c24e8fcc75",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "bd7b18e2-3e2e-4c3b-9085-de26a61b792d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"url": "http://localhost:8080/auth/logout"
							},
							"response": []
						}
					],
					"id": "53dc9307-db32-4955-a492-a82a1eef19e9"
				},
				{
					"name": "OrderController",
					"item": [
						{
							"name": "(testuser@gmail.com) http://localhost:8080/auth/login (testuser@gmail.com) Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d65ba736-d351-4b25-9796-7e32b859411a",
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.globals.set(\"Authorization\", pm.response.headers.get(\"Authorization\"));\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c894c89e-eaf8-4138-8eb4-c6a1d4407c0c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"testuser@gmail.com\",\r\n    \"password\": \"password\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/auth/login"
							},
							"response": []
						},
						{
							"name": "/api/order",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "52bbe7b9-fbcb-483f-a675-f5f1ccd88f2b",
										"exec": [
											"pm.test(\"Status code correct.\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"User email correct.\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"testuser@gmail.com\");",
											"});",
											"",
											"pm.test(\"paymentID correct.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.paymentId).to.eql(\"safecard111\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c96cb8da-982a-42e2-90ae-eecef7178e88",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Authorization}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"paymentId\": \"safecard111\",\n  \"shipmentAddress\": \"9999888877776666\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/api/order"
							},
							"response": []
						},
						{
							"name": "/api/order/history",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d3dd7bd-16ed-4896-8679-a78b5ba0a94c",
										"exec": [
											"pm.test(\"Status code is correct.\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"User email correct.\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"testuser@gmail.com\");",
											"});",
											"",
											"pm.test(\"paymentID correct.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].paymentId).to.eql(\"safecard111\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b9f71a51-4b07-47b8-a59d-c2ef1d35b2de",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Authorization}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8080/api/order/history?",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"order",
										"history"
									],
									"query": [
										{
											"key": "",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/order/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1a4bfe9b-57bc-42d0-a7cc-2441ff7ae3bd",
										"exec": [
											"pm.test(\"Status code is correct\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"User email correct.\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"testuser@gmail.com\");",
											"});",
											"",
											"pm.test(\"PaymentID correct.\", function () {",
											"      pm.expect(pm.response.text()).to.contain(\"safecard111\");",
											" });",
											"",
											" pm.test(\"User is active.\", function () {",
											"      pm.expect(pm.response.text()).to.contain(true);",
											" });",
											"",
											"  pm.test(\"Reset password token is null.\", function () {",
											"      pm.expect(pm.response.text()).to.contain(null);",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "cea9e09d-d93d-4c93-8bad-7d2d341dbbd4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Authorization}}",
										"type": "text"
									},
									{
										"key": "OrderID",
										"value": "2",
										"type": "text",
										"disabled": true
									}
								],
								"url": "http://localhost:8080/api/order/{{OrderID}}"
							},
							"response": []
						},
						{
							"name": "/api/order",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "40e4ed73-74a9-412c-bba3-f3fb565821f4",
										"exec": [
											"pm.test(\"Status code correct\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"  pm.test(\"PaymentID correct.\", function () {",
											"      pm.expect(pm.response.text()).to.contain(\"safecard111\");",
											" });",
											"",
											"   pm.test(\"Date correct on card.\", function () {",
											"      pm.expect(pm.response.text()).to.contain(\"2022-12-05\");",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e7490909-5fcb-4bad-a57a-cb8b18c1dcf4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Authorization}}",
										"type": "text"
									}
								],
								"url": "http://localhost:8080/api/order"
							},
							"response": []
						}
					],
					"id": "c79b9450-18fc-4ced-9e0d-8fc19cbb1729"
				},
				{
					"name": "OrderDetail",
					"item": [
						{
							"name": "(testuser@gmail.com) http://localhost:8080/auth/login (testuser@gmail.com) Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d65ba736-d351-4b25-9796-7e32b859411a",
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.globals.set(\"Authorization\", pm.response.headers.get(\"Authorization\"));\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c1006968-d822-4e5e-bdfd-9b449e906d33",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"testuser@gmail.com\",\r\n    \"password\": \"password\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/auth/login"
							},
							"response": []
						},
						{
							"name": "/api/orderdetail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed4eefa1-0d8c-467f-888f-31d1172b988e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "60ef6fff-deaf-4a6b-b536-c8c85d10dd0d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Authorization}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"productId\": \"1\",\n  \"orderId\": \"1\",\n  \"quantity\": \"0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/api/orderdetail"
							},
							"response": []
						},
						{
							"name": "/api/orderdetail/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "83ebe83a-42dc-4586-90ac-38e22e89ac3b",
										"exec": [
											"pm.test(\"Status code is correct.\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"firstname is correct.\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Testerson\");",
											"});",
											"",
											"pm.test(\"lastname is correct.\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Usertown\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "14560125-6349-405b-9639-2d447d106e93",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Authorization}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/api/orderdetail/{{orderid}}"
							},
							"response": []
						},
						{
							"name": "/api/orderdetail/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2a324cf7-88dd-4729-951f-35f731477f3d",
										"exec": [
											"pm.test(\"Correct status code.\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Body response is empty.\", function () {",
											"    pm.response.to.have.body(\"\");",
											"});",
											"",
											"pm.test(\"Response time is quick.\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "34094415-d9c4-4c3b-a3be-2f89491be69c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "{{Authorization}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/api/orderdetail/{{incorrectorderid}}"
							},
							"response": []
						},
						{
							"name": "/api/orderdetail/order/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b2fcf61d-98e2-437a-8bcd-77e2517dada4",
										"exec": [
											"pm.test(\"Correct status code.\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											" ",
											"pm.test(\"Orders id  is correct.\", function () {",
											"    pm.expect(pm.response.json()[0].id).to.eq(2);",
											"});",
											"",
											"pm.test(\"Product id  is correct.\", function () {",
											"    pm.expect(pm.response.json()[0].productId).to.eq(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d92337e3-b97f-48c3-aaf0-2407e25000e8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Authorization}}",
										"type": "text"
									}
								],
								"url": "http://localhost:8080/api/orderdetail/order/{{OrderID}}"
							},
							"response": []
						}
					],
					"id": "ed49f1db-2d0d-42be-88d6-8e6327b90106"
				},
				{
					"name": "PaymentController",
					"item": [
						{
							"name": "(testuser@gmail.com) http://localhost:8080/auth/login (testuser@gmail.com) Copy 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d65ba736-d351-4b25-9796-7e32b859411a",
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.globals.set(\"Authorization\", pm.response.headers.get(\"Authorization\"));\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f3372436-b889-4722-a827-e0f69b3a9dc4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"testuser@gmail.com\",\r\n    \"password\": \"password\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/auth/login"
							},
							"response": []
						},
						{
							"name": "/api/payment",
							"id": "a2d52d5b-c757-45ad-88c6-97ba7c041a18",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Authorization}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"paymentId\" : \"notincard233\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/payment/?paymentId=notincard233",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"payment",
										""
									],
									"query": [
										{
											"key": "paymentId",
											"value": "notincard233"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b8b0c2b8-3bf3-48ff-af1d-d84e88fb6b91",
										"exec": [
											"pm.test(\"Status code is correct.\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body is correct.\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"safecard111\");",
											"});",
											"",
											"pm.test(\"Cvv correct.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].ccv).to.eql(\"123\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f68d5358-3428-419a-a235-3d5ae7054c3b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Authorization}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8080/api/payment",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"payment"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bf78b2e5-9a2b-4cf7-aae6-42d79766961e",
										"exec": [
											"pm.test(\"Correct status code.\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Correct ccv\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.ccv).to.eql(\"string\");",
											"});",
											"",
											"pm.test(\"Correct userEmail\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.userEmail).to.eql(\"testuser@gmail.com\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "4ef6adf6-b836-4e39-83a5-df1135cc65d4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Authorization}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"ccv\": \"string\",\n  \"expDate\": \"2022-12-05T19:51:32.665Z\",\n  \"cardNumber\": \"string\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/api/payment"
							},
							"response": []
						},
						{
							"name": "/api/payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "756974f2-ad64-4783-8053-57b97c69c58f",
										"exec": [
											"",
											"pm.test(\"Correct status code.\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Correct ccv.\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"string\");",
											"});",
											"",
											"pm.test(\"Correct card number.\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"string\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "51e68fe8-eab9-43bb-94b7-59ecfb502c9f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Authorization}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"paymentId\": 3,\n  \"cardType\": \"2343222244424234\",\n  \"expDate\": \"2022-12-05T20:01:15.857Z\",\n  \"cardNumber\": \"6565444455552222\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/api/payment"
							},
							"response": []
						}
					],
					"id": "5eb3b1de-0de3-48b8-b3ba-237436147af5"
				},
				{
					"name": "ProductController",
					"item": [
						{
							"name": "http://localhost:8080/api/product/search/{keyword}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "537f5ef9-d178-4236-a6d4-a2ce3aeda296",
										"exec": [
											"pm.collectionVariables.set(\"productKeyword\", \"headphones\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4f09d04b-82d2-487c-bf97-5fcf3da6ca0d",
										"exec": [
											"pm.test(\"Retrived All Products\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check Product - Positive\", () => {\r",
											"    pm.expect(pm.response.text()).to.contain(1);\r",
											"    pm.expect(pm.response.text()).to.contain(10);\r",
											"    pm.expect(pm.response.text()).to.contain(20.0);\r",
											"    pm.expect(pm.response.text()).to.contain(\"A nice pair of headphones\");\r",
											"    pm.expect(pm.response.text()).to.contain(\"https://i.insider.com/54eb437f6bb3f7697f85da71?width=1000&format=jpeg&auto=webp\");\r",
											"    pm.expect(pm.response.text()).to.contain(\"Headphones\");\r",
											"    pm.expect(pm.response.text()).to.contain(true);\r",
											"});\r",
											"\r",
											"pm.test(\"Search Correct Products\", () => {\r",
											"      pm.expect(pm.response.text()).to.contain(\"Headphones\");\r",
											" });\r",
											"\r",
											" pm.test(\"Search Incorrect Product\", () => {\r",
											"     pm.expect(pm.response.text()).to.contain(\"Shopping Bag\");\r",
											" });\r",
											"\r",
											"pm.test(\"Check Product - Negative\", () => {\r",
											"    pm.expect(pm.response.text()).to.contain(3);\r",
											"    pm.expect(pm.response.text()).to.contain(20);\r",
											"    pm.expect(pm.response.text()).to.contain(2.5);\r",
											"    pm.expect(pm.response.text()).to.contain(\"A reusable shopping bag\");\r",
											"    pm.expect(pm.response.text()).to.contain(\"https://images.ctfassets.net/5gvckmvm9289/3BlDoZxSSjqAvv1jBJP7TH/65f9a95484117730ace42abf64e89572/Noissue-x-Creatsy-Tote-Bag-Mockup-Bundle-_4_-2.png\");\r",
											"    pm.expect(pm.response.text()).to.contain(\"Shopping Bag\");\r",
											"    pm.expect(pm.response.text()).to.contain(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a4427623-103f-4a2b-9f47-a3f95d3aeee4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "http://localhost:8080/api/product/search/{{productKeyword}}"
							},
							"response": []
						},
						{
							"name": "http://localhost:8080/api/product/{id}(Negative Test-Product Does Not Exist)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05fb4cf9-7559-436f-96e6-1e9ba19e9efd",
										"exec": [
											"pm.test(\"Response body is empty.\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"\");",
											"});",
											"",
											"pm.test(\"Status code is a 404 error.\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ee2e1f37-2c74-4363-a42f-a7bdde721a3b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Authorization}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/api/product/10"
							},
							"response": []
						},
						{
							"name": "http://localhost:8080/api/product",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a5b77703-860d-4ad8-a2a2-3024cb2dba83",
										"exec": [
											"pm.test(\"Retrived All Products\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Test Headphone Retrived\", () => {\r",
											"    pm.expect(responseJson[0].id).to.eql(1);\r",
											"    pm.expect(responseJson[0].quantity).to.eql(10);\r",
											"    pm.expect(responseJson[0].price).to.eql(20.0);\r",
											"    pm.expect(responseJson[0].description).to.eql(\"A nice pair of headphones\");\r",
											"    pm.expect(responseJson[0].image).to.eql(\"https://i.insider.com/54eb437f6bb3f7697f85da71?width=1000&format=jpeg&auto=webp\");\r",
											"    pm.expect(responseJson[0].name).to.eql(\"Headphones\");\r",
											"    pm.expect(responseJson[0].active).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.test(\"Test Shirt Retrived\", () => {\r",
											"    pm.expect(responseJson[6].id).to.eql(7);\r",
											"    pm.expect(responseJson[6].quantity).to.eql(5);\r",
											"    pm.expect(responseJson[6].price).to.eql(99.99);\r",
											"    pm.expect(responseJson[6].description).to.eql(\"A nicer MeeShirt\");\r",
											"    pm.expect(responseJson[6].image).to.eql(\"https://m.media-amazon.com/images/I/B1DBWbloIpS._CLa%7C2140%2C2000%7C51snuhwZFIL.png%7C0%2C0%2C2140%2C2000%2B0.0%2C0.0%2C2140.0%2C2000.0_AC_SL1500_.png\");\r",
											"    pm.expect(responseJson[6].name).to.eql(\"TeeShirt\");\r",
											"    pm.expect(responseJson[6].active).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.test(\"Test Accessory Retrived\", () => {\r",
											"    pm.expect(responseJson[2].id).to.eql(3);\r",
											"    pm.expect(responseJson[2].quantity).to.eql(20);\r",
											"    pm.expect(responseJson[2].price).to.eql(2.5);\r",
											"    pm.expect(responseJson[2].description).to.eql(\"A reusable shopping bag\");\r",
											"    pm.expect(responseJson[2].image).to.eql(\"https://images.ctfassets.net/5gvckmvm9289/3BlDoZxSSjqAvv1jBJP7TH/65f9a95484117730ace42abf64e89572/Noissue-x-Creatsy-Tote-Bag-Mockup-Bundle-_4_-2.png\");\r",
											"    pm.expect(responseJson[2].name).to.eql(\"Shopping Bag\");\r",
											"    pm.expect(responseJson[2].active).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.test(\"Test Hat Retrived\", () => {\r",
											"    pm.expect(responseJson[8].id).to.eql(9);\r",
											"    pm.expect(responseJson[8].quantity).to.eql(1);\r",
											"    pm.expect(responseJson[8].price).to.eql(1000.0);\r",
											"    pm.expect(responseJson[8].description).to.eql(\"A fancier hat for a fancier person\");\r",
											"    pm.expect(responseJson[8].image).to.eql(\"https://cdn.shopify.com/s/files/1/2624/7744/products/ReversibleRen-RedSilver-Leather-TopHat-AmericanHatMakers-Men-STUD_900x900.jpg?v=1668713281\");\r",
											"    pm.expect(responseJson[8].name).to.eql(\"Hat\");\r",
											"    pm.expect(responseJson[8].active).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.test(\"Test Coat Retrived\", () => {\r",
											"    pm.expect(responseJson[4].id).to.eql(5);\r",
											"    pm.expect(responseJson[4].quantity).to.eql(3);\r",
											"    pm.expect(responseJson[4].price).to.eql(80.0);\r",
											"    pm.expect(responseJson[4].description).to.eql(\"A nice coat\");\r",
											"    pm.expect(responseJson[4].image).to.eql(\"https://www.pngarts.com/files/3/Women-Jacket-PNG-High-Quality-Image.png\");\r",
											"    pm.expect(responseJson[4].name).to.eql(\"Coat\");\r",
											"    pm.expect(responseJson[4].active).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f76115e1-9f78-49ed-ae1a-d7e803ab7db9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "http://localhost:8080/api/product"
							},
							"response": []
						},
						{
							"name": "http://localhost:8080/api/product/{id}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7e692730-d993-456a-92e7-f47084a6e15d",
										"exec": [
											"pm.collectionVariables.set(\"productID\", 10);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3a8424d6-f5a2-4c10-ae02-b4f11b1fca63",
										"exec": [
											"pm.test(\"Retrived All Products\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Product Filter - Positive\", () => {\r",
											"    pm.expect(responseJson.id).to.eql(10);\r",
											"    pm.expect(responseJson.quantity).to.eql(3);\r",
											"    pm.expect(responseJson.price).to.eql(1.99);\r",
											"    pm.expect(responseJson.description).to.eql(\"A niceish coat\");\r",
											"    pm.expect(responseJson.image).to.eql(\"https://media.bergdorfgoodman.com/f_auto,q_auto:good,ar_5:7,c_fill,dpr_1.0,w_720/01/bg_4370145_100664_m\");\r",
											"    pm.expect(responseJson.name).to.eql(\"Coat\");\r",
											"    pm.expect(responseJson.active).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.test(\"Product Filter - Negative\", () => {\r",
											"    pm.expect(responseJson.id).to.eql(3);\r",
											"    pm.expect(responseJson.quantity).to.eql(20);\r",
											"    pm.expect(responseJson.price).to.eql(2.5);\r",
											"    pm.expect(responseJson.description).to.eql(\"A reusable shopping bag\");\r",
											"    pm.expect(responseJson.image).to.eql(\"https://images.ctfassets.net/5gvckmvm9289/3BlDoZxSSjqAvv1jBJP7TH/65f9a95484117730ace42abf64e89572/Noissue-x-Creatsy-Tote-Bag-Mockup-Bundle-_4_-2.png\");\r",
											"    pm.expect(responseJson.name).to.eql(\"Shopping Bag\");\r",
											"    pm.expect(responseJson.active).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "08f9a3e5-7b61-4e5f-b268-c1024928835b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "http://localhost:8080/api/product/{{productID}}"
							},
							"response": []
						},
						{
							"name": "http://localhost:8080/api/product",
							"id": "3f6e4449-9ebc-4225-92ea-ced8cc49cdd3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Authorization}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"id\": 10,\r\n    \"quantity\": 1,\r\n    \"price\": 1000000.00,\r\n    \"description\": \"Unique Teapot\",\r\n    \"image\": \"https://cdn.shopify.com/static/sample-images/teapot.jpg\",\r\n    \"name\": \"Cup\",\r\n    \"active\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/api/product"
							},
							"response": []
						},
						{
							"name": "http://localhost:8080/api/product",
							"id": "4e9aa136-5084-4b3c-b7f1-9f40261a2c4c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  [\r\n    {\r\n        \"id\": 3,\r\n        \"quantity\": 4\r\n    }\r\n  ]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/api/product"
							},
							"response": []
						}
					],
					"id": "61fa1dbd-98da-4d71-be22-5f0471fc0514"
				},
				{
					"name": "ProductController USER TEST",
					"item": [
						{
							"name": "http://localhost:8080/api/product/search/{keyword}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "537f5ef9-d178-4236-a6d4-a2ce3aeda296",
										"exec": [
											"pm.collectionVariables.set(\"productKeyword\", \"headphones\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4f09d04b-82d2-487c-bf97-5fcf3da6ca0d",
										"exec": [
											"pm.test(\"Retrived All Products\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check Product - Positive\", () => {\r",
											"    pm.expect(pm.response.text()).to.contain(1);\r",
											"    pm.expect(pm.response.text()).to.contain(10);\r",
											"    pm.expect(pm.response.text()).to.contain(20.0);\r",
											"    pm.expect(pm.response.text()).to.contain(\"A nice pair of headphones\");\r",
											"    pm.expect(pm.response.text()).to.contain(\"https://i.insider.com/54eb437f6bb3f7697f85da71?width=1000&format=jpeg&auto=webp\");\r",
											"    pm.expect(pm.response.text()).to.contain(\"Headphones\");\r",
											"    pm.expect(pm.response.text()).to.contain(true);\r",
											"});\r",
											"\r",
											"pm.test(\"Search Correct Products\", () => {\r",
											"      pm.expect(pm.response.text()).to.contain(\"Headphones\");\r",
											" });\r",
											"\r",
											" pm.test(\"Search Incorrect Product\", () => {\r",
											"     pm.expect(pm.response.text()).to.contain(\"Shopping Bag\");\r",
											" });\r",
											"\r",
											"pm.test(\"Check Product - Negative\", () => {\r",
											"    pm.expect(pm.response.text()).to.contain(3);\r",
											"    pm.expect(pm.response.text()).to.contain(20);\r",
											"    pm.expect(pm.response.text()).to.contain(2.5);\r",
											"    pm.expect(pm.response.text()).to.contain(\"A reusable shopping bag\");\r",
											"    pm.expect(pm.response.text()).to.contain(\"https://images.ctfassets.net/5gvckmvm9289/3BlDoZxSSjqAvv1jBJP7TH/65f9a95484117730ace42abf64e89572/Noissue-x-Creatsy-Tote-Bag-Mockup-Bundle-_4_-2.png\");\r",
											"    pm.expect(pm.response.text()).to.contain(\"Shopping Bag\");\r",
											"    pm.expect(pm.response.text()).to.contain(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "5c0f1697-0af9-4178-b3c8-8454ed96ea70",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "http://localhost:8080/api/product/search/{{productKeyword}}"
							},
							"response": []
						},
						{
							"name": "http://localhost:8080/api/product/{id}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "566f3a30-4f1c-4954-becf-26deb5a158b6",
										"exec": [
											"pm.collectionVariables.set(\"productID\", 20);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3fe5b61e-81e3-428d-917a-2482e8350075",
										"exec": [
											"pm.test(\"Retrived All Products\", () => {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "8ff3125e-e0eb-466a-ac4d-692cd5fd31e7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Authorization}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/api/product/4"
							},
							"response": []
						},
						{
							"name": "http://localhost:8080/api/product/{id}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7e692730-d993-456a-92e7-f47084a6e15d",
										"exec": [
											"pm.collectionVariables.set(\"productID\", 10);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3a8424d6-f5a2-4c10-ae02-b4f11b1fca63",
										"exec": [
											"pm.test(\"Retrived All Products\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Product Filter - Positive\", () => {\r",
											"    pm.expect(responseJson.id).to.eql(10);\r",
											"    pm.expect(responseJson.quantity).to.eql(3);\r",
											"    pm.expect(responseJson.price).to.eql(1.99);\r",
											"    pm.expect(responseJson.description).to.eql(\"A niceish coat\");\r",
											"    pm.expect(responseJson.image).to.eql(\"https://media.bergdorfgoodman.com/f_auto,q_auto:good,ar_5:7,c_fill,dpr_1.0,w_720/01/bg_4370145_100664_m\");\r",
											"    pm.expect(responseJson.name).to.eql(\"Coat\");\r",
											"    pm.expect(responseJson.active).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.test(\"Product Filter - Negative\", () => {\r",
											"    pm.expect(responseJson.id).to.eql(3);\r",
											"    pm.expect(responseJson.quantity).to.eql(20);\r",
											"    pm.expect(responseJson.price).to.eql(2.5);\r",
											"    pm.expect(responseJson.description).to.eql(\"A reusable shopping bag\");\r",
											"    pm.expect(responseJson.image).to.eql(\"https://images.ctfassets.net/5gvckmvm9289/3BlDoZxSSjqAvv1jBJP7TH/65f9a95484117730ace42abf64e89572/Noissue-x-Creatsy-Tote-Bag-Mockup-Bundle-_4_-2.png\");\r",
											"    pm.expect(responseJson.name).to.eql(\"Shopping Bag\");\r",
											"    pm.expect(responseJson.active).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ac88b553-7181-4cba-ac21-0cbdbfdd7eb9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "http://localhost:8080/api/product/{{productID}}"
							},
							"response": []
						},
						{
							"name": "http://localhost:8080/api/product",
							"id": "f21f22cd-f31f-46ff-b8ad-b12b1ebd3a21",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"id\": 1,\r\n        \"quantity\": 1\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/api/product"
							},
							"response": []
						},
						{
							"name": "http://localhost:8080/api/product Copy",
							"id": "5a76dffe-d811-4bd2-90e9-ac510edb5e46",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"id\": 1,\r\n        \"quantity\": 1\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/api/product"
							},
							"response": []
						}
					],
					"id": "5c060c7b-398f-4446-9b9b-ec21e5bfe585"
				},
				{
					"name": "ProductReviewController",
					"item": [
						{
							"name": "http://localhost:8080/api/productreview",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1d02819d-0682-4ea1-bfcd-737d5d9ac342",
										"exec": [
											"// connection check\r",
											"pm.test(\"Retrived All Product Review\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"// product review for shirt1\r",
											"pm.test(\"Product Review - Positive -> shirt\", () => {\r",
											"    pm.expect(responseJson[0].id).to.eql(1);\r",
											"    pm.expect(responseJson[0].rating).to.eql(4);\r",
											"    pm.expect(responseJson[0].comment).to.eql(\"This shirt is the best\");\r",
											"    pm.expect(responseJson[0].postId).to.eql(2);\r",
											"});\r",
											"\r",
											"// product review for headphone2\r",
											"pm.test(\"Product Review - Positive -> headphone\", () => {\r",
											"    pm.expect(responseJson[5].id).to.eql(6);\r",
											"    pm.expect(responseJson[5].rating).to.eql(2);\r",
											"    pm.expect(responseJson[5].comment).to.eql(\"These sound like tin cans\");\r",
											"    pm.expect(responseJson[5].postId).to.eql(6);\r",
											"});\r",
											"\r",
											"// product revuew for mask\r",
											"pm.test(\"Product Review - Positive -> mask\", () => {\r",
											"    pm.expect(responseJson[7].id).to.eql(8);\r",
											"    pm.expect(responseJson[7].rating).to.eql(5);\r",
											"    pm.expect(responseJson[7].comment).to.eql(\"Air is the enemy\");\r",
											"    pm.expect(responseJson[7].postId).to.eql(8);\r",
											"});\r",
											"\r",
											"// product review is incorrect for coat1\r",
											"pm.test(\"Product Review - Negative -> coat\", () => {\r",
											"    pm.expect(responseJson[4].id).to.eql(5);\r",
											"    pm.expect(responseJson[4].rating).to.eql(1);\r",
											"    pm.expect(responseJson[4].comment).to.eql(\"An itchy coat\");\r",
											"    pm.expect(responseJson[4].postId).to.eql(5);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "0793c075-f705-4772-9a8e-5ad8e4721fd4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "http://localhost:8080/api/productreview"
							},
							"response": []
						},
						{
							"name": "http://localhost:8080/api/productreview/avr/{id}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3c075d35-45c4-4fb8-b228-c593b830d51d",
										"exec": [
											"// get average review rating\r",
											"\r",
											"// avg review for mask\r",
											"pm.collectionVariables.set(\"productID\", 8);\r",
											"\r",
											"// avg review for headphone1\r",
											"//pm.collectionVariables.set(\"productID\", 1);\r",
											"\r",
											"/* \r",
											"    TESTING FOR AVERAGE REVIEW RATE\r",
											"    ===============================\r",
											"    *** set to test postive ***\r",
											"    testing postive\r",
											"        -> leave default\r",
											"    testing negative\r",
											"        -> comment mask\r",
											"        -> uncomment headphone1\r",
											"*/"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "adbd7572-e2b4-44e8-a1ca-bf58f8ff0cd5",
										"exec": [
											"// connection check\r",
											"pm.test(\"Retrived Product Review Average\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"// check average rating - positive\r",
											"pm.test(\"Average Rating - Positive\", () => {\r",
											"    pm.expect(responseJson).to.eql(5);\r",
											"});\r",
											"\r",
											"// check average rating - negative\r",
											"pm.test(\"Average Rating - Negative\", () => {\r",
											"    pm.expect(responseJson).to.eql(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "bf896d5f-c69a-448e-b114-8be95ca93f38",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Authorization}}",
										"type": "text"
									}
								],
								"url": "http://localhost:8080/api/productreview/avr/{{productID}}"
							},
							"response": []
						},
						{
							"name": "http://localhost:8080/api/productreview/post/{post_id}/{user_id}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "97724644-400d-4463-9a69-edabdeb40f25",
										"exec": [
											"// check if user can post\r",
											"// user can post\r",
											"// admin can't post\r",
											"\r",
											"// get a user\r",
											"pm.collectionVariables.set(\"productPostID\", 6);\r",
											"pm.collectionVariables.set(\"productUserID\", 2);\r",
											"\r",
											"// get a admin\r",
											"//pm.collectionVariables.set(\"productPostID\", 6);\r",
											"//pm.collectionVariables.set(\"productUserID\", 1);\r",
											"\r",
											"/* \r",
											"    TESTING FOR CAN POST\r",
											"    ===============================\r",
											"    *** set to test user ***\r",
											"    testing user\r",
											"        -> leave default\r",
											"    testing admin\r",
											"        -> comment user postID & userID\r",
											"        -> uncomment admin postID & userID\r",
											"*/"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "95eb194c-e6a5-4b4a-8f54-cbe1b893a660",
										"exec": [
											"// connection check\r",
											"pm.test(\"Retrived If User Can Post\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"// can post\r",
											"pm.test(\"Can Post -> notAdmin\", () => {\r",
											"    pm.expect(responseJson).to.eql(true);\r",
											"});\r",
											"\r",
											"// can't post\r",
											"pm.test(\"Can't Post -> isAdmin \", () => {\r",
											"    pm.expect(responseJson).to.eql(false);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "668ffe67-88d2-4d1b-b321-6926e309a364",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Authorization}}",
										"type": "text"
									}
								],
								"url": "http://localhost:8080/api/productreview/post/{{productPostID}}/{{productUserID}}"
							},
							"response": []
						},
						{
							"name": "http://localhost:8080/api/productreview/{id}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b04ef69e-a4e2-4915-8038-39103719ee20",
										"exec": [
											"pm.collectionVariables.set(\"productID\", 11);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ccace428-257c-4412-b51e-1e07705bfa2c",
										"exec": [
											"pm.test(\"Retrived All Product Review\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "94058d92-6b1a-49e8-b5e7-fc9d11fd0b42",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Authorization}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://localhost:8080/api/productreview/{{productID}}"
							},
							"response": []
						},
						{
							"name": "http://localhost:8080/api/productreview/{id}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "73b66b7b-1758-4e10-a378-95a7665417b4",
										"exec": [
											"// get review from shirt\r",
											"\r",
											"// shirt 2\r",
											"pm.collectionVariables.set(\"productID\", 7);\r",
											"\r",
											"// shirt 1\r",
											"//pm.collectionVariables.set(\"productID\", 2);\r",
											"\r",
											"/* \r",
											"    TESTING FOR VIEW PRODUCT REVIEW\r",
											"    ===============================\r",
											"    *** set to test shirt2 ***\r",
											"    testing shirt1\r",
											"        -> comment shirt2\r",
											"        -> uncomment shirt1\r",
											"    testing shirt2\r",
											"        -> leave default\r",
											"*/"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "028f3c43-a38e-4177-b01a-04a069a55804",
										"exec": [
											"// connection check\r",
											"pm.test(\"Retrived Product Review\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"let userParams = responseJson[0].user;\r",
											"\r",
											"// product review for shirt2\r",
											"pm.test(\"Product Review - Positive -> shirt2\", () => {\r",
											"    // product review\r",
											"    pm.expect(responseJson[0].id).to.eql(7);\r",
											"    pm.expect(responseJson[0].rating).to.eql(4);\r",
											"    pm.expect(responseJson[0].comment).to.eql(\"A vote for me is a vote for this shirt\");\r",
											"    pm.expect(responseJson[0].postId).to.eql(7);\r",
											"    // user connected\r",
											"    pm.expect(userParams.userId).to.eql(1);\r",
											"    pm.expect(userParams.email).to.eql(\"testuser@gmail.com\");\r",
											"    pm.expect(userParams.firstName).to.eql(\"Testerson\");\r",
											"    pm.expect(userParams.lastName).to.eql(\"Usertown\");\r",
											"    pm.expect(userParams.active).to.eql(true);\r",
											"    pm.expect(userParams.admin).to.eql(true);\r",
											"});\r",
											"\r",
											"// product review for shirt1\r",
											"pm.test(\"Product Review - Positive -> shirt1\", () => {\r",
											"    // product review\r",
											"    pm.expect(responseJson[0].id).to.eql(1);\r",
											"    pm.expect(responseJson[0].rating).to.eql(4);\r",
											"    pm.expect(responseJson[0].comment).to.eql(\"This shirt is the best\");\r",
											"    pm.expect(responseJson[0].postId).to.eql(2);\r",
											"    // user connected\r",
											"    pm.expect(userParams.userId).to.eql(1);\r",
											"    pm.expect(userParams.email).to.eql(\"testuser@gmail.com\");\r",
											"    pm.expect(userParams.firstName).to.eql(\"Testerson\");\r",
											"    pm.expect(userParams.lastName).to.eql(\"Usertown\");\r",
											"    pm.expect(userParams.active).to.eql(true);\r",
											"    pm.expect(userParams.admin).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "157a7900-89aa-4e63-8eca-2328a561fdc3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "http://localhost:8080/api/productreview/{{productID}}"
							},
							"response": []
						},
						{
							"name": "http://localhost:8080/api/productreview/rate/{id}/{rating}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "83d3bd83-1bb4-4666-955a-0e8e4ca83058",
										"exec": [
											"pm.collectionVariables.set(\"productID\", 7);\r",
											"pm.collectionVariables.set(\"productRating\", 4);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "96862fef-7d95-48a8-8c8d-2e4071f5aadc",
										"exec": [
											"pm.test(\"Retrived Product\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check Product ID & Rating - Postive\", () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson[0].id).to.eql(7);\r",
											"    pm.expect(responseJson[0].rating).to.eql(4);\r",
											"});\r",
											"\r",
											"pm.test(\"Check Product ID & Rating - Negative\", () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson[0].id).to.eql(3);\r",
											"    pm.expect(responseJson[0].rating).to.eql(5);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "34cdbecc-7631-4671-a911-881d6834f7d3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "http://localhost:8080/api/productreview/rate/{{productID}}/{{productRating}}"
							},
							"response": []
						},
						{
							"name": "http://localhost:8080/api/productreview",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dec009e1-a444-4e11-81c5-5f69d3ae1b62",
										"exec": [
											"pm.test(\"Retrived All Product Review\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e659a28c-cebe-45fe-a103-1b48017dc2c5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Authorization}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 10,\r\n    \"rating\": 5,\r\n    \"comment\": \"So puffy its like a cloud\",\r\n    \"postId\": 10\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/api/productreview"
							},
							"response": []
						}
					],
					"id": "83332763-5f10-4a08-9e89-792ca9cae059"
				}
			],
			"id": "6401bac9-8c4a-4be3-b94e-aa3a12128156"
		},
		{
			"name": "Endpoint Tests",
			"item": [
				{
					"name": "User & Auth Tests",
					"item": [
						{
							"name": "Register as valid new user and deactivate",
							"item": [
								{
									"name": "Register as new user (newuser1@email.com)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6a3fcd1d-4719-41bb-825f-c6f021c6fcce",
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"})\r",
													"pm.test(\"User email saved\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"newuser1@email.com\");\r",
													"});\r",
													"pm.test(\"User first name saved\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Jeffy\");\r",
													"});\r",
													"pm.test(\"User last name saved\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Jefferson\");\r",
													"});\r",
													"pm.test(\"User not deactivated\", function () {\r",
													"    console.log(\"active\" + \": true\")\r",
													"    pm.expect(pm.response.text()).to.include('\"active\":true');\r",
													"});\r",
													"pm.test(\"User not admin\", function () {\r",
													"    pm.expect(pm.response.text()).to.include('\"admin\":false');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "92188268-1479-4307-9e44-035a66653e91",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"newuser1@email.com\",\r\n  \"password\": \"Password1*\",\r\n  \"firstName\": \"Jeffy\",\r\n  \"lastName\": \"Jefferson\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "http://localhost:8080/auth/register"
									},
									"response": []
								},
								{
									"name": "Log in as new user (newuser1@email.com)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d65ba736-d351-4b25-9796-7e32b859411a",
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.globals.set(\"Authorization\", pm.response.headers.get(\"Authorization\"));\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"User email saved\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"newuser1@email.com\");\r",
													"});\r",
													"pm.test(\"User first name saved\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Jeffy\");\r",
													"});\r",
													"pm.test(\"User last name saved\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Jefferson\");\r",
													"});\r",
													"pm.test(\"User not deactivated\", function () {\r",
													"    console.log(\"active\" + \": true\")\r",
													"    pm.expect(pm.response.text()).to.include('\"active\":true');\r",
													"});\r",
													"pm.test(\"User not admin\", function () {\r",
													"    pm.expect(pm.response.text()).to.include('\"admin\":false');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "a2ce6962-0715-4640-987d-457d83b50a17",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"newuser1@email.com\",\r\n  \"password\": \"Password1*\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "http://localhost:8080/auth/login"
									},
									"response": []
								},
								{
									"name": "Deactivate new user (newuser1@email.com)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1a55b8bd-5c4c-47e0-83ce-74554174efee",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"User deactivated\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"The user account is successfully deactivated!\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "e0fa42d9-dd61-46ee-984c-09b4dd9bb1b7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{Authorization}}",
												"type": "text"
											}
										],
										"url": "http://localhost:8080/user/deactivate"
									},
									"response": []
								},
								{
									"name": "Check if new user was deactivated (newuser1@meail.com)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c138bafa-5b87-4064-b9e0-aab3da1e9c11",
												"exec": [
													"pm.test(\"User email saved\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"newuser1@email.com\");\r",
													"});\r",
													"pm.test(\"User first name saved\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Jeffy\");\r",
													"});\r",
													"pm.test(\"User last name saved\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Jefferson\");\r",
													"});\r",
													"pm.test(\"User not deactivated\", function () {\r",
													"    console.log(\"active\" + \": true\")\r",
													"    pm.expect(pm.response.text()).to.include('\"active\":false');\r",
													"});\r",
													"pm.test(\"User not admin\", function () {\r",
													"    pm.expect(pm.response.text()).to.include('\"admin\":false');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "de05837f-8994-4579-9172-b03c82761c1d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{Authorization}}",
												"type": "text"
											}
										],
										"url": "http://localhost:8080/user"
									},
									"response": []
								},
								{
									"name": "Try to log in as deactivated new user (newuser1@email.com)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bf617511-cf45-48d5-9519-06abe750f631",
												"exec": [
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"pm.test(\"User email saved\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"User's account is currently inactive, Please login with another account\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "287ccc76-8ec3-4391-9fbe-0527a29a81f5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"newuser1@email.com\",\r\n  \"password\": \"Password1*\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "http://localhost:8080/auth/login"
									},
									"response": []
								}
							],
							"id": "948f4d0f-746e-4bbe-a184-aec5c3754c53"
						},
						{
							"name": "(all information invalid) Register as invalid new user and deactivate",
							"item": [
								{
									"name": "Register as new user with invalid input (newuser1)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6a3fcd1d-4719-41bb-825f-c6f021c6fcce",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"})\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "b994b35e-dd90-452e-b5ec-cd1d1bdb508b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"newuser1\",\r\n  \"password\": \"pw\",\r\n  \"firstName\": \"Jeffy1*\",\r\n  \"lastName\": \"Jefferson1*\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "http://localhost:8080/auth/register"
									},
									"response": []
								},
								{
									"name": "Log in will fail if invalid new user was not created (newuser1)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d65ba736-d351-4b25-9796-7e32b859411a",
												"exec": [
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "4714810f-7fb4-41be-8e0a-58e8b4051323",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"newuser1\",\r\n  \"password\": \"pw\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "http://localhost:8080/auth/login"
									},
									"response": []
								},
								{
									"name": "Deactivate the new user in case they were created (newuser1)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1a55b8bd-5c4c-47e0-83ce-74554174efee",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"User deactivated\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"The user account is successfully deactivated!\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "8e478671-fbb9-4f57-9176-6c3e219622aa",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{Authorization}}",
												"type": "text"
											}
										],
										"url": "http://localhost:8080/user/deactivate"
									},
									"response": []
								},
								{
									"name": "There should be no atuh token if user was not created(newuser1)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c138bafa-5b87-4064-b9e0-aab3da1e9c11",
												"exec": [
													"\r",
													"pm.test(\"No Authorization token\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"No Authorization token found\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "1775d68f-3d7e-42a0-91e9-fe513aa9803e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{Authorization}}",
												"type": "text"
											}
										],
										"url": "http://localhost:8080/user"
									},
									"response": []
								},
								{
									"name": "Try to log in as deactivated user (newuser1)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d65ba736-d351-4b25-9796-7e32b859411a",
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "5e3e62f5-316c-478f-80a0-60eb4c1555a8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"newuser12\",\r\n  \"password\": \"pw\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "http://localhost:8080/auth/login"
									},
									"response": []
								}
							],
							"id": "d4f06386-99bb-4b05-803f-c0b654b7b1be"
						},
						{
							"name": "(Blank Email) Register as invalid new user and deactivate",
							"item": [
								{
									"name": "Register as new user with invalid input (newuser1)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6a3fcd1d-4719-41bb-825f-c6f021c6fcce",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"})\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "f030a43d-482d-4066-baa6-c7be52245d4b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"\",\r\n  \"password\": \"Password1*\",\r\n  \"firstName\": \"Jeffy\",\r\n  \"lastName\": \"Jefferson\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "http://localhost:8080/auth/register"
									},
									"response": []
								},
								{
									"name": "Invalid user tries to log in",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d65ba736-d351-4b25-9796-7e32b859411a",
												"exec": [
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"User email saved\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Invalid User input\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "f31c4b6c-d4e8-4144-bf75-0f6e3468903a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"\",\r\n  \"password\": \"pw\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "http://localhost:8080/auth/login"
									},
									"response": []
								}
							],
							"id": "1593f1c8-cfd9-4c0b-9f35-59dc4f7b5213"
						},
						{
							"name": "(Blank password) Register as invalid new user",
							"item": [
								{
									"name": "Register as new user with invalid input (newuser1)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6a3fcd1d-4719-41bb-825f-c6f021c6fcce",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"})\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "a2c2eea4-9b10-4e0f-a569-8610b87db2c3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"newuser2@email.com\",\r\n  \"password\": \"\",\r\n  \"firstName\": \"Jeffy\",\r\n  \"lastName\": \"Jefferson\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "http://localhost:8080/auth/register"
									},
									"response": []
								},
								{
									"name": "Invalid user tries to log in",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d65ba736-d351-4b25-9796-7e32b859411a",
												"exec": [
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "a497a3f7-f2b6-43a6-a6e2-0393bbafb70e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"newuser2@email.com\",\r\n  \"password\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "http://localhost:8080/auth/login"
									},
									"response": []
								}
							],
							"id": "2bfb7ba6-5d02-4754-b508-a031786aaa77"
						},
						{
							"name": "(Blank first and last name) Register as invalid new user",
							"item": [
								{
									"name": "Register as new user with invalid input (newuser1)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6a3fcd1d-4719-41bb-825f-c6f021c6fcce",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"})\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d05e6405-76a2-43cb-90de-d6be3b816d6d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"newuser3@email.com\",\r\n  \"password\": \"Password1*\",\r\n  \"firstName\": \"\",\r\n  \"lastName\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "http://localhost:8080/auth/register"
									},
									"response": []
								},
								{
									"name": "Invalid user tries to log in",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d65ba736-d351-4b25-9796-7e32b859411a",
												"exec": [
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "b4c20168-1074-45f5-a11a-61bc631c7471",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"newuser3@email.com\",\r\n    \"password\": \"Password1*\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "http://localhost:8080/auth/login"
									},
									"response": []
								}
							],
							"id": "e95d5931-7ac9-4339-b3c6-ead489d8a242"
						},
						{
							"name": "Test Auth and Logout",
							"item": [
								{
									"name": "Log in (testuser@gmail.com)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d65ba736-d351-4b25-9796-7e32b859411a",
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.globals.set(\"Authorization\", pm.response.headers.get(\"Authorization\"));\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"User email saved\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"testuser@gmail.com\");\r",
													"});\r",
													"pm.test(\"User first name saved\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Testerson\");\r",
													"});\r",
													"pm.test(\"User last name saved\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Usertown\");\r",
													"});\r",
													"pm.test(\"User not deactivated\", function () {\r",
													"    console.log(\"active\" + \": true\")\r",
													"    pm.expect(pm.response.text()).to.include('\"active\":true');\r",
													"});\r",
													"pm.test(\"User not admin\", function () {\r",
													"    pm.expect(pm.response.text()).to.include('\"admin\":true');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "c04f818f-5a35-4307-883a-0206112a8049",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"testuser@gmail.com\",\r\n    \"password\": \"password\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "http://localhost:8080/auth/login"
									},
									"response": []
								},
								{
									"name": "Get logged in user by Auth token (testuser@gmail.com)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d601687a-0c5e-4ea4-9248-d0862b70367c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"User email saved\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"testuser@gmail.com\");\r",
													"});\r",
													"pm.test(\"User first name saved\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Testerson\");\r",
													"});\r",
													"pm.test(\"User last name saved\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Usertown\");\r",
													"});\r",
													"pm.test(\"User not deactivated\", function () {\r",
													"    console.log(\"active\" + \": true\")\r",
													"    pm.expect(pm.response.text()).to.include('\"active\":true');\r",
													"});\r",
													"pm.test(\"User not admin\", function () {\r",
													"    pm.expect(pm.response.text()).to.include('\"admin\":true');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "bae1fb15-e398-4302-a5dd-1f60d7c3de5e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{Authorization}}",
												"type": "text"
											}
										],
										"url": "http://localhost:8080/auth"
									},
									"response": []
								},
								{
									"name": "Log out (newuser1@gmail.com)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "013e39b9-de82-4332-a3eb-50c24e8fcc75",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.globals.set(\"Authorization\", pm.response.headers.get(\"Authorization\"));\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "2562e8dd-b2af-41ff-8c51-60cf65a0b2c4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{Authorization}}",
												"type": "text"
											}
										],
										"url": "http://localhost:8080/auth/logout"
									},
									"response": []
								},
								{
									"name": "Should not return user since Auth token is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7685417-5f64-4018-8b01-b95a21925ce3",
												"exec": [
													"pm.test(\"No auth after log out\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"No Authorization token found\");\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "3bc6b7bc-e863-4d10-b67e-03e704d426d2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{Authorization}}",
												"type": "text"
											}
										],
										"url": "http://localhost:8080/auth"
									},
									"response": []
								}
							],
							"id": "80797c28-bca0-41ba-8b8f-072683877746"
						},
						{
							"name": "Manually create and update new user with invalid input (newuser2@email.com)",
							"item": [
								{
									"name": "Create new user (newuser2@email.com)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3db16982-c11e-4070-b609-7cfbcab201d7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"})\r",
													"pm.test(\"User email saved\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"newuser2@email.com\");\r",
													"});\r",
													"pm.test(\"User first name saved\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Jeffy\");\r",
													"});\r",
													"pm.test(\"User last name saved\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Jefferson\");\r",
													"});\r",
													"pm.test(\"User not deactivated\", function () {\r",
													"    console.log(\"active\" + \": true\")\r",
													"    pm.expect(pm.response.text()).to.include('\"active\":true');\r",
													"});\r",
													"pm.test(\"User not admin\", function () {\r",
													"    pm.expect(pm.response.text()).to.include('\"admin\":false');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "e5c0971a-5fc0-49d0-b626-4a3052608e13",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{Authorization}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"newuser2@email.com\",\r\n  \"password\": \"Password1*\",\r\n  \"firstName\": \"Jeffy\",\r\n  \"lastName\": \"Jefferson\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "http://localhost:8080/user"
									},
									"response": []
								},
								{
									"name": "Log in as new user (newuser2@email.com)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d65ba736-d351-4b25-9796-7e32b859411a",
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.globals.set(\"Authorization\", pm.response.headers.get(\"Authorization\"));\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"User email saved\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"newuser2@email.com\");\r",
													"});\r",
													"pm.test(\"User first name saved\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Jeffy\");\r",
													"});\r",
													"pm.test(\"User last name saved\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Jefferson\");\r",
													"});\r",
													"pm.test(\"User not deactivated\", function () {\r",
													"    console.log(\"active\" + \": true\")\r",
													"    pm.expect(pm.response.text()).to.include('\"active\":true');\r",
													"});\r",
													"pm.test(\"User not admin\", function () {\r",
													"    pm.expect(pm.response.text()).to.include('\"admin\":false');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "8452e9ac-6e4d-4812-98ec-edf7b8756c98",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"newuser2@email.com\",\r\n  \"password\": \"Password1*\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "http://localhost:8080/auth/login"
									},
									"response": []
								},
								{
									"name": "Update user info with invalid input (newuser2@email.com)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1d504e46-5187-490e-84ac-73cc69463ede",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "6ba290f6-b42d-49fc-a0ce-e69d8343b200",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{Authorization}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"newuser2@email.com\",\r\n  \"password\": \"Password1\",\r\n  \"firstName\": \"Jeffy1\",\r\n  \"lastName\": \"Jefferson1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "http://localhost:8080/user"
									},
									"response": []
								},
								{
									"name": "Log out (newuser2@gmail.com)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "013e39b9-de82-4332-a3eb-50c24e8fcc75",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.globals.set(\"Authorization\", pm.response.headers.get(\"Authorization\"));\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "bb9714fa-2156-4a26-adb7-eae874367994",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{Authorization}}",
												"type": "text"
											}
										],
										"url": "http://localhost:8080/auth/logout"
									},
									"response": []
								},
								{
									"name": "Check if new user was deactivated (newuser2@email.com)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c138bafa-5b87-4064-b9e0-aab3da1e9c11",
												"exec": [
													"pm.test(\"User email saved\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"newuser2@email.com\");\r",
													"});\r",
													"pm.test(\"User first name saved\", function () {\r",
													"    pm.expect(pm.response.text()).to.not.include(\"Jeffy1\");\r",
													"});\r",
													"pm.test(\"User last name saved\", function () {\r",
													"    pm.expect(pm.response.text()).to.not.include(\"Jefferson1\");\r",
													"});\r",
													"pm.test(\"User not deactivated\", function () {\r",
													"    console.log(\"active\" + \": true\")\r",
													"    pm.expect(pm.response.text()).to.include('\"active\":true');\r",
													"});\r",
													"pm.test(\"User not admin\", function () {\r",
													"    pm.expect(pm.response.text()).to.include('\"admin\":false');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "fc211e4b-780f-4ac9-a222-6347a1e648ec",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{Authorization}}",
												"type": "text"
											}
										],
										"url": "http://localhost:8080/user"
									},
									"response": []
								},
								{
									"name": "Log in as new user (newuser2@email.com) Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d65ba736-d351-4b25-9796-7e32b859411a",
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.globals.set(\"Authorization\", pm.response.headers.get(\"Authorization\"));\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"User email saved\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"newuser2@email.com\");\r",
													"});\r",
													"pm.test(\"User first name saved\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Jeffy\");\r",
													"});\r",
													"pm.test(\"User last name saved\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Jefferson\");\r",
													"});\r",
													"pm.test(\"User not deactivated\", function () {\r",
													"    console.log(\"active\" + \": true\")\r",
													"    pm.expect(pm.response.text()).to.include('\"active\":true');\r",
													"});\r",
													"pm.test(\"User not admin\", function () {\r",
													"    pm.expect(pm.response.text()).to.include('\"admin\":false');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "deb9532f-036b-4ed4-87e6-f1447e9d1702",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"newuser2@email.com\",\r\n  \"password\": \"Password1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "http://localhost:8080/auth/login"
									},
									"response": []
								}
							],
							"id": "c1773408-3537-4a25-89bc-70c6309fa1b0"
						},
						{
							"name": "Reset Password and login with new password",
							"item": [
								{
									"name": "Log in (project03test@gmail.com)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d65ba736-d351-4b25-9796-7e32b859411a",
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.globals.set(\"Authorization\", pm.response.headers.get(\"Authorization\"));\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"User email saved\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"project03test@gmail.com\");\r",
													"});\r",
													"pm.test(\"User first name saved\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Fakey\");\r",
													"});\r",
													"pm.test(\"User last name saved\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"McFake\");\r",
													"});\r",
													"pm.test(\"User not deactivated\", function () {\r",
													"    console.log(\"active\" + \": true\")\r",
													"    pm.expect(pm.response.text()).to.include('\"active\":true');\r",
													"});\r",
													"pm.test(\"User not admin\", function () {\r",
													"    pm.expect(pm.response.text()).to.include('\"admin\":false');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "22a03f14-02ab-494c-837a-4052a68ae6de",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": {
												"addTokenTo": "queryParams"
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"project03test@gmail.com\",\r\n    \"password\": \"Password1*\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "http://localhost:8080/auth/login"
									},
									"response": []
								},
								{
									"name": "Send email with reset-password link (project03test@gmail.com)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ce12d84d-d756-4718-a7f1-81cd138a39ed",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "47a0093c-2b14-420d-b1e5-989d99e76a1d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"project03test@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "http://localhost:8080/auth/forgot-password"
									},
									"response": []
								},
								{
									"name": "Get html from reset-password request (project03test@gmail.com)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "935817e5-9430-4e37-b885-4b29fbe5ffa6",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "9fbe846a-8d43-4f2a-8ce4-05bb4e923007",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{Authorization}}",
												"type": "text"
											}
										],
										"url": "http://localhost:8080/auth/reset-password/b8415e67-be9e-4674-b58b-67b030cad7a5"
									},
									"response": [
										{
											"id": "abbbb73b-0728-4630-8137-dffa823a53a0",
											"name": "Get html from reset-password request (project03test@gmail.com)",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "{{Authorization}}",
														"type": "text"
													}
												],
												"url": "http://localhost:8080/auth/reset-password/b8415e67-be9e-4674-b58b-67b030cad7a5"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "plain",
											"header": [
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-XSS-Protection",
													"value": "1; mode=block"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "X-Frame-Options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "Content-Length",
													"value": "0"
												},
												{
													"key": "Date",
													"value": "Mon, 12 Dec 2022 17:47:02 GMT"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=60"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": null
										}
									]
								},
								{
									"name": "Reset Password (project03test@gmail.com)",
									"id": "8b80caf4-ca9a-4eff-9bfd-1399b72090f8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{Authorization}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"project03test@gmail.com\",\r\n    \"password\": \"Password1\",\r\n    \"firstName\": \"Fakey\",\r\n    \"lastName\": \"McFake\"\r\n    \r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "http://localhost:8080/auth/reset-password/b8415e67-be9e-4674-b58b-67b030cad7a5"
									},
									"response": [
										{
											"id": "b9511a0d-89e0-4bb5-a2f5-9a9be2875896",
											"name": "Reset Password (project03test@gmail.com)",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "{{Authorization}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"project03test@gmail.com\",\r\n    \"password\": \"Password1*\",\r\n    \"firstName\": \"Fakey\",\r\n    \"lastName\": \"McFake\"\r\n    \r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/auth/reset-password/b8415e67-be9e-4674-b58b-67b030cad7a5"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "plain",
											"header": [
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-XSS-Protection",
													"value": "1; mode=block"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "X-Frame-Options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "Content-Length",
													"value": "0"
												},
												{
													"key": "Date",
													"value": "Mon, 12 Dec 2022 17:47:15 GMT"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=60"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": null
										}
									]
								},
								{
									"name": "Log in (project03test@gmail.com) Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d65ba736-d351-4b25-9796-7e32b859411a",
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.globals.set(\"Authorization\", pm.response.headers.get(\"Authorization\"));\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"User email saved\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"project03test@gmail.com\");\r",
													"});\r",
													"pm.test(\"User first name saved\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Fakey\");\r",
													"});\r",
													"pm.test(\"User last name saved\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"McFake\");\r",
													"});\r",
													"pm.test(\"User not deactivated\", function () {\r",
													"    console.log(\"active\" + \": true\")\r",
													"    pm.expect(pm.response.text()).to.include('\"active\":true');\r",
													"});\r",
													"pm.test(\"User not admin\", function () {\r",
													"    pm.expect(pm.response.text()).to.include('\"admin\":false');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "4be0a61a-920b-4c3d-9fd5-728282f6868f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": {
												"addTokenTo": "queryParams"
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"project03test@gmail.com\",\r\n    \"password\": \"Password1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "http://localhost:8080/auth/login"
									},
									"response": []
								},
								{
									"name": "Update user info with invalid input (newuser2@email.com) Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1d504e46-5187-490e-84ac-73cc69463ede",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "f06d6f79-c7ba-4bc7-89d7-4af76488c65c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{Authorization}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"project03test@email.com\",\r\n  \"password\": \"Password1*\",\r\n  \"firstName\": \"Fakey\",\r\n  \"lastName\": \"McFake\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "http://localhost:8080/user"
									},
									"response": []
								}
							],
							"id": "27db52e0-32cd-4b51-85b1-0accde36d39f"
						},
						{
							"name": "Reset Password and try to login with old password",
							"item": [
								{
									"name": "Log in (project03test@gmail.com)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d65ba736-d351-4b25-9796-7e32b859411a",
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.globals.set(\"Authorization\", pm.response.headers.get(\"Authorization\"));\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"User email saved\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"project03test@gmail.com\");\r",
													"});\r",
													"pm.test(\"User first name saved\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Fakey\");\r",
													"});\r",
													"pm.test(\"User last name saved\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"McFake\");\r",
													"});\r",
													"pm.test(\"User not deactivated\", function () {\r",
													"    console.log(\"active\" + \": true\")\r",
													"    pm.expect(pm.response.text()).to.include('\"active\":true');\r",
													"});\r",
													"pm.test(\"User not admin\", function () {\r",
													"    pm.expect(pm.response.text()).to.include('\"admin\":false');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "c342d686-deb1-48cf-a541-2cc0f0e67771",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": {
												"addTokenTo": "queryParams"
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"project03test@gmail.com\",\r\n    \"password\": \"Password1*\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "http://localhost:8080/auth/login"
									},
									"response": []
								},
								{
									"name": "Send email with reset-password link (project03test@gmail.com)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ce12d84d-d756-4718-a7f1-81cd138a39ed",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "3bfebfac-d3d6-4955-b217-8d238f69e178",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"project03test@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "http://localhost:8080/auth/forgot-password"
									},
									"response": []
								},
								{
									"name": "Get html from reset-password request (project03test@gmail.com)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "935817e5-9430-4e37-b885-4b29fbe5ffa6",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "61eb27d4-65d1-463a-8abe-75a3d4216251",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{Authorization}}",
												"type": "text"
											}
										],
										"url": "http://localhost:8080/auth/reset-password/b8415e67-be9e-4674-b58b-67b030cad7a5"
									},
									"response": [
										{
											"id": "978c86d5-8670-4d06-b1a4-39cf37de2184",
											"name": "Get html from reset-password request (project03test@gmail.com)",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "{{Authorization}}",
														"type": "text"
													}
												],
												"url": "http://localhost:8080/auth/reset-password/b8415e67-be9e-4674-b58b-67b030cad7a5"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "plain",
											"header": [
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-XSS-Protection",
													"value": "1; mode=block"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "X-Frame-Options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "Content-Length",
													"value": "0"
												},
												{
													"key": "Date",
													"value": "Mon, 12 Dec 2022 17:47:02 GMT"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=60"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": null
										}
									]
								},
								{
									"name": "Reset Password (project03test@gmail.com)",
									"id": "bd165060-fd6c-4d77-b4da-8f9170612601",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{Authorization}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"project03test@gmail.com\",\r\n    \"password\": \"Password1\",\r\n    \"firstName\": \"Fakey\",\r\n    \"lastName\": \"McFake\"\r\n    \r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "http://localhost:8080/auth/reset-password/b8415e67-be9e-4674-b58b-67b030cad7a5"
									},
									"response": [
										{
											"id": "338896f6-cf0e-4449-9a6c-18859183ef00",
											"name": "Reset Password (project03test@gmail.com)",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "{{Authorization}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"project03test@gmail.com\",\r\n    \"password\": \"Password1*\",\r\n    \"firstName\": \"Fakey\",\r\n    \"lastName\": \"McFake\"\r\n    \r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/auth/reset-password/b8415e67-be9e-4674-b58b-67b030cad7a5"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "plain",
											"header": [
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-XSS-Protection",
													"value": "1; mode=block"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "X-Frame-Options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "Content-Length",
													"value": "0"
												},
												{
													"key": "Date",
													"value": "Mon, 12 Dec 2022 17:47:15 GMT"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=60"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": null
										}
									]
								},
								{
									"name": "Log in (project03test@gmail.com) Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d65ba736-d351-4b25-9796-7e32b859411a",
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.globals.set(\"Authorization\", pm.response.headers.get(\"Authorization\"));\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"User email saved\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"project03test@gmail.com\");\r",
													"});\r",
													"pm.test(\"User first name saved\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Fakey\");\r",
													"});\r",
													"pm.test(\"User last name saved\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"McFake\");\r",
													"});\r",
													"pm.test(\"User not deactivated\", function () {\r",
													"    console.log(\"active\" + \": true\")\r",
													"    pm.expect(pm.response.text()).to.include('\"active\":true');\r",
													"});\r",
													"pm.test(\"User not admin\", function () {\r",
													"    pm.expect(pm.response.text()).to.include('\"admin\":false');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "da348545-a4bd-45ef-bd5b-90f94223320d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": {
												"addTokenTo": "queryParams"
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"project03test@gmail.com\",\r\n    \"password\": \"Password1*\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "http://localhost:8080/auth/login"
									},
									"response": []
								},
								{
									"name": "Update user info with invalid input (newuser2@email.com) Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1d504e46-5187-490e-84ac-73cc69463ede",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "6ecef264-91bd-4645-94f3-13b977fb59df",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{Authorization}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"project03test@email.com\",\r\n  \"password\": \"Password1*\",\r\n  \"firstName\": \"Fakey\",\r\n  \"lastName\": \"McFake\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "http://localhost:8080/user"
									},
									"response": []
								}
							],
							"id": "a1b09415-6ae4-4a29-b633-7cf086551971"
						}
					],
					"id": "ecf1ad5a-0085-4e15-8680-39565f969e9a"
				},
				{
					"name": "Product Tests",
					"item": [
						{
							"name": "Product",
							"item": [
								{
									"name": "Search Products",
									"item": [
										{
											"name": "(testuser@gmail.com) http://localhost:8080/auth/login (testuser@gmail.com)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d65ba736-d351-4b25-9796-7e32b859411a",
														"exec": [
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.globals.set(\"Authorization\", pm.response.headers.get(\"Authorization\"));\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "7e0f9a14-12e3-49a7-800d-9ff2aedd86b5",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"testuser@gmail.com\",\r\n    \"password\": \"password\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/auth/login"
											},
											"response": []
										},
										{
											"name": "http://localhost:8080/api/product",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a5b77703-860d-4ad8-a2a2-3024cb2dba83",
														"exec": [
															"pm.test(\"Retrived All Products\", () => {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"const responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Headphone Retrived\", () => {\r",
															"    pm.expect(pm.response.text()).to.contain(1);\r",
															"    pm.expect(pm.response.text()).to.contain(10);\r",
															"    pm.expect(pm.response.text()).to.contain(20.0);\r",
															"    pm.expect(pm.response.text()).to.contain(\"A nice pair of headphones\");\r",
															"    pm.expect(pm.response.text()).to.contain(\"https://i.insider.com/54eb437f6bb3f7697f85da71?width=1000&format=jpeg&auto=webp\");\r",
															"    pm.expect(pm.response.text()).to.contain(\"Headphones\");\r",
															"    pm.expect(pm.response.text()).to.contain(true);\r",
															"});\r",
															"\r",
															"pm.test(\"Shirt Retrived\", () => {\r",
															"    pm.expect(pm.response.text()).to.contain(7);\r",
															"    pm.expect(pm.response.text()).to.contain(5);\r",
															"    pm.expect(pm.response.text()).to.contain(99.99);\r",
															"    pm.expect(pm.response.text()).to.contain(\"A nicer MeeShirt\");\r",
															"    pm.expect(pm.response.text()).to.contain(\"https://m.media-amazon.com/images/I/B1DBWbloIpS._CLa%7C2140%2C2000%7C51snuhwZFIL.png%7C0%2C0%2C2140%2C2000%2B0.0%2C0.0%2C2140.0%2C2000.0_AC_SL1500_.png\");\r",
															"    pm.expect(pm.response.text()).to.contain(\"TeeShirt\");\r",
															"    pm.expect(pm.response.text()).to.contain(true);\r",
															"});\r",
															"\r",
															"pm.test(\"Accessory Retrived\", () => {\r",
															"    pm.expect(pm.response.text()).to.contain(3);\r",
															"    pm.expect(pm.response.text()).to.contain(20);\r",
															"    pm.expect(pm.response.text()).to.contain(2.5);\r",
															"    pm.expect(pm.response.text()).to.contain(\"A reusable shopping bag\");\r",
															"    pm.expect(pm.response.text()).to.contain(\"https://images.ctfassets.net/5gvckmvm9289/3BlDoZxSSjqAvv1jBJP7TH/65f9a95484117730ace42abf64e89572/Noissue-x-Creatsy-Tote-Bag-Mockup-Bundle-_4_-2.png\");\r",
															"    pm.expect(pm.response.text()).to.contain(\"Shopping Bag\");\r",
															"    pm.expect(pm.response.text()).to.contain(true);\r",
															"});\r",
															"\r",
															"pm.test(\"Hat Retrived\", () => {\r",
															"    pm.expect(pm.response.text()).to.contain(4);\r",
															"    pm.expect(pm.response.text()).to.contain(20);\r",
															"    pm.expect(pm.response.text()).to.contain(10.0);\r",
															"    pm.expect(pm.response.text()).to.contain(\"A fancy cap for a fancy person\");\r",
															"    pm.expect(pm.response.text()).to.contain(\"https://d3o2e4jr3mxnm3.cloudfront.net/Rocket-Vintage-Chill-Cap_66374_1_lg.png\");\r",
															"    pm.expect(pm.response.text()).to.contain(\"Hat\");\r",
															"    pm.expect(pm.response.text()).to.contain(true);\r",
															"});\r",
															"\r",
															"pm.test(\"Coat Retrived\", () => {\r",
															"    pm.expect(pm.response.text()).to.contain(10);\r",
															"    pm.expect(pm.response.text()).to.contain(3);\r",
															"    pm.expect(pm.response.text()).to.contain(1.99);\r",
															"    pm.expect(pm.response.text()).to.contain(\"A niceish coat\");\r",
															"    pm.expect(pm.response.text()).to.contain(\"https://media.bergdorfgoodman.com/f_auto,q_auto:good,ar_5:7,c_fill,dpr_1.0,w_720/01/bg_4370145_100664_m\");\r",
															"    pm.expect(pm.response.text()).to.contain(\"Coat\");\r",
															"    pm.expect(pm.response.text()).to.contain(true);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "660f5a26-0ef8-491e-9ef3-cbf5e13cc836",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": "http://localhost:8080/api/product"
											},
											"response": []
										},
										{
											"name": "http://localhost:8080/api/product(Negative Testing to view all products)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a5b77703-860d-4ad8-a2a2-3024cb2dba83",
														"exec": [
															"pm.test(\"Retrived All Products\", () => {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"const responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Headphone Retrived\", () => {\r",
															"    pm.expect(pm.response.text()).to.contain(1);\r",
															"    pm.expect(pm.response.text()).to.contain(10);\r",
															"    pm.expect(pm.response.text()).to.contain(20.0);\r",
															"    pm.expect(pm.response.text()).to.contain(\"A nice pair of headphones\");\r",
															"    pm.expect(pm.response.text()).to.contain(\"https://i.insider.com/54eb437f6bb3f7697f85da71?width=1000&format=jpeg&auto=webp\");\r",
															"    pm.expect(pm.response.text()).to.contain(\"Headphones\");\r",
															"    pm.expect(pm.response.text()).to.contain(true);\r",
															"});\r",
															"\r",
															"pm.test(\"Shirt Retrived\", () => {\r",
															"    pm.expect(pm.response.text()).to.contain(7);\r",
															"    pm.expect(pm.response.text()).to.contain(5);\r",
															"    pm.expect(pm.response.text()).to.contain(99.99);\r",
															"    pm.expect(pm.response.text()).to.contain(\"A nicer MeeShirt\");\r",
															"    pm.expect(pm.response.text()).to.contain(\"https://m.media-amazon.com/images/I/B1DBWbloIpS._CLa%7C2140%2C2000%7C51snuhwZFIL.png%7C0%2C0%2C2140%2C2000%2B0.0%2C0.0%2C2140.0%2C2000.0_AC_SL1500_.png\");\r",
															"    pm.expect(pm.response.text()).to.contain(\"TeeShirt\");\r",
															"    pm.expect(pm.response.text()).to.contain(true);\r",
															"});\r",
															"\r",
															"pm.test(\"Accessory Retrived\", () => {\r",
															"    pm.expect(pm.response.text()).to.contain(3);\r",
															"    pm.expect(pm.response.text()).to.contain(20);\r",
															"    pm.expect(pm.response.text()).to.contain(2.5);\r",
															"    pm.expect(pm.response.text()).to.contain(\"A reusable shopping bag\");\r",
															"    pm.expect(pm.response.text()).to.contain(\"https://images.ctfassets.net/5gvckmvm9289/3BlDoZxSSjqAvv1jBJP7TH/65f9a95484117730ace42abf64e89572/Noissue-x-Creatsy-Tote-Bag-Mockup-Bundle-_4_-2.png\");\r",
															"    pm.expect(pm.response.text()).to.contain(\"Shopping Bag\");\r",
															"    pm.expect(pm.response.text()).to.contain(true);\r",
															"});\r",
															"\r",
															"pm.test(\"Hat Retrived\", () => {\r",
															"    pm.expect(pm.response.text()).to.contain(4);\r",
															"    pm.expect(pm.response.text()).to.contain(20);\r",
															"    pm.expect(pm.response.text()).to.contain(10.0);\r",
															"    pm.expect(pm.response.text()).to.contain(\"A fancy cap for a fancy person\");\r",
															"    pm.expect(pm.response.text()).to.contain(\"https://d3o2e4jr3mxnm3.cloudfront.net/Rocket-Vintage-Chill-Cap_66374_1_lg.png\");\r",
															"    pm.expect(pm.response.text()).to.contain(\"Hat\");\r",
															"    pm.expect(pm.response.text()).to.contain(true);\r",
															"});\r",
															"\r",
															"pm.test(\"Coat Retrived\", () => {\r",
															"    pm.expect(pm.response.text()).to.contain(10);\r",
															"    pm.expect(pm.response.text()).to.contain(3);\r",
															"    pm.expect(pm.response.text()).to.contain(1.99);\r",
															"    pm.expect(pm.response.text()).to.contain(\"A niceish coat\");\r",
															"    pm.expect(pm.response.text()).to.contain(\"https://media.bergdorfgoodman.com/f_auto,q_auto:good,ar_5:7,c_fill,dpr_1.0,w_720/01/bg_4370145_100664_m\");\r",
															"    pm.expect(pm.response.text()).to.contain(\"Coat\");\r",
															"    pm.expect(pm.response.text()).to.contain(true);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "dcf4f938-311f-4117-83e6-e3d9a3f5b5b0",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": "http://localhost:8080/api/product"
											},
											"response": []
										}
									],
									"id": "efe2dc0f-7381-40c1-9682-20192db6a2d8"
								},
								{
									"name": "Search Product By Keyword - Positive",
									"item": [
										{
											"name": "(testuser@gmail.com) http://localhost:8080/auth/login (testuser@gmail.com)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d65ba736-d351-4b25-9796-7e32b859411a",
														"exec": [
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.globals.set(\"Authorization\", pm.response.headers.get(\"Authorization\"));\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "04283cfe-9fef-47d3-9ad6-ec65c1d5447f",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"testuser@gmail.com\",\r\n    \"password\": \"password\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/auth/login"
											},
											"response": []
										},
										{
											"name": "http://localhost:8080/api/product/search/{keyword} - Positive",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "537f5ef9-d178-4236-a6d4-a2ce3aeda296",
														"exec": [
															"pm.collectionVariables.set(\"productKeyword\", \"headphones\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "4f09d04b-82d2-487c-bf97-5fcf3da6ca0d",
														"exec": [
															"pm.test(\"Retrived Headphones\", () => {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Check Product - Positive\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson[0].id).to.eql(1);\r",
															"    pm.expect(responseJson[0].quantity).to.eql(10);\r",
															"    pm.expect(responseJson[0].price).to.eql(20.0);\r",
															"    pm.expect(responseJson[0].description).to.eql(\"A nice pair of headphones\");\r",
															"    pm.expect(responseJson[0].image).to.eql(\"https://i.insider.com/54eb437f6bb3f7697f85da71?width=1000&format=jpeg&auto=webp\");\r",
															"    pm.expect(responseJson[0].name).to.eql(\"Headphones\");\r",
															"    pm.expect(responseJson[0].active).to.eql(true);\r",
															"});\r",
															"\r",
															"pm.test(\"Search Headphones\", () => {\r",
															"      pm.expect(pm.response.text()).to.contain(\"Headphones\");\r",
															" });\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "0865ade8-8bbb-4ea9-84b8-c1c6af63c027",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": "http://localhost:8080/api/product/search/{{productKeyword}}"
											},
											"response": []
										},
										{
											"name": "http://localhost:8080/api/product/search/(Search by keyword for coat)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "537f5ef9-d178-4236-a6d4-a2ce3aeda296",
														"exec": [
															"pm.collectionVariables.set(\"productKeyword\", \"headphones\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "4f09d04b-82d2-487c-bf97-5fcf3da6ca0d",
														"exec": [
															"pm.test(\"Status code is correct 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"const responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Checking to make sure all values are correct for a coat. \", () => {\r",
															"    pm.expect(responseJson[0].id).to.eql(5);\r",
															"    pm.expect(responseJson[0].quantity).to.eql(3);\r",
															"    pm.expect(responseJson[0].price).to.eql(80.0);\r",
															"    pm.expect(responseJson[0].description).to.include(\"A nice\");\r",
															"    pm.expect(responseJson[0].image).to.include(\".png\");\r",
															"    pm.expect(responseJson[0].name).to.include(\"Coat\");\r",
															"    pm.expect(responseJson[0].active).to.eql(true);\r",
															"});\r",
															"\r",
															"\r",
															" "
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "7ab0442c-ebd3-481d-85c3-443c480ffad1",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": "http://localhost:8080/api/product/search/coat"
											},
											"response": []
										}
									],
									"id": "85745b72-3daa-44fe-b1ee-9452976696f7"
								},
								{
									"name": "Search Product By Keyword - Negative",
									"item": [
										{
											"name": "(testuser@gmail.com) http://localhost:8080/auth/login (testuser@gmail.com)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d65ba736-d351-4b25-9796-7e32b859411a",
														"exec": [
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.globals.set(\"Authorization\", pm.response.headers.get(\"Authorization\"));\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "2d688f9c-56f1-4713-b040-2d17fe95285f",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"testuser@gmail.com\",\r\n    \"password\": \"password\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/auth/login"
											},
											"response": []
										},
										{
											"name": "http://localhost:8080/api/product/search/{keyword} - negative",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "537f5ef9-d178-4236-a6d4-a2ce3aeda296",
														"exec": [
															"pm.collectionVariables.set(\"productKeyword\", \"headphones\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "4f09d04b-82d2-487c-bf97-5fcf3da6ca0d",
														"exec": [
															"pm.test(\"Retrived Headphones\", () => {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Check Product - Negative\", () => {\r",
															"    pm.expect(pm.response.text()).to.contain(3);\r",
															"    pm.expect(pm.response.text()).to.contain(20);\r",
															"    pm.expect(pm.response.text()).to.contain(2.5);\r",
															"    pm.expect(pm.response.text()).to.contain(\"A reusable shopping bag\");\r",
															"    pm.expect(pm.response.text()).to.contain(\"https://images.ctfassets.net/5gvckmvm9289/3BlDoZxSSjqAvv1jBJP7TH/65f9a95484117730ace42abf64e89572/Noissue-x-Creatsy-Tote-Bag-Mockup-Bundle-_4_-2.png\");\r",
															"    pm.expect(pm.response.text()).to.contain(\"Shopping Bag\");\r",
															"    pm.expect(pm.response.text()).to.contain(true);\r",
															"});\r",
															"\r",
															" pm.test(\"Search Shopping Bag\", () => {\r",
															"     pm.expect(pm.response.text()).to.contain(\"Shopping Bag\");\r",
															" });"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "32001740-3115-4505-a540-b206d167d5fa",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": "http://localhost:8080/api/product/search/{{productKeyword}}"
											},
											"response": []
										}
									],
									"id": "5cf8f164-07c0-4fb7-96ed-b4479de5887e"
								},
								{
									"name": "Search Product By ID - Positive",
									"item": [
										{
											"name": "(testuser@gmail.com) http://localhost:8080/auth/login (testuser@gmail.com)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d65ba736-d351-4b25-9796-7e32b859411a",
														"exec": [
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.globals.set(\"Authorization\", pm.response.headers.get(\"Authorization\"));\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "f141d5d4-138b-4518-9866-d4353060379a",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"testuser@gmail.com\",\r\n    \"password\": \"password\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/auth/login"
											},
											"response": []
										},
										{
											"name": "http://localhost:8080/api/product/{id} - Positive",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "7e692730-d993-456a-92e7-f47084a6e15d",
														"exec": [
															"pm.collectionVariables.set(\"productID\", 10);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "3a8424d6-f5a2-4c10-ae02-b4f11b1fca63",
														"exec": [
															"pm.test(\"Retrived Coat\", () => {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"const responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Product Filter - Positive [Coat]\", () => {\r",
															"    pm.expect(responseJson.id).to.eql(10);\r",
															"    pm.expect(responseJson.quantity).to.eql(3);\r",
															"    pm.expect(responseJson.price).to.eql(1.99);\r",
															"    pm.expect(responseJson.description).to.eql(\"A niceish coat\");\r",
															"    pm.expect(responseJson.image).to.eql(\"https://media.bergdorfgoodman.com/f_auto,q_auto:good,ar_5:7,c_fill,dpr_1.0,w_720/01/bg_4370145_100664_m\");\r",
															"    pm.expect(responseJson.name).to.eql(\"Coat\");\r",
															"    pm.expect(responseJson.active).to.eql(true);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "e51f34a0-e9ef-4b40-9156-4189073c6949",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": "http://localhost:8080/api/product/{{productID}}"
											},
											"response": []
										},
										{
											"name": "http://localhost:8080/api/product/(Positive - Searching for a different product ID by 9)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "7e692730-d993-456a-92e7-f47084a6e15d",
														"exec": [
															"pm.collectionVariables.set(\"productID\", 10);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "3a8424d6-f5a2-4c10-ae02-b4f11b1fca63",
														"exec": [
															"pm.test(\"Status code is correct 200.\", () => {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"const responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Testing for the coat\", () => {\r",
															"    pm.expect(responseJson.id).to.eql(9);\r",
															"    pm.expect(responseJson.quantity).to.eql(1);\r",
															"    pm.expect(responseJson.price).to.eql(1000.0);\r",
															"    pm.expect(responseJson.description).to.include(\"fancier\");\r",
															"    pm.expect(responseJson.image).to.include(\".jpg\");\r",
															"    pm.expect(responseJson.name).to.eql(\"Hat\");\r",
															"    pm.expect(responseJson.active).to.eql(true);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "fa0be1e4-822a-4d23-92cf-ab7c37adc0bd",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": "http://localhost:8080/api/product/9"
											},
											"response": []
										}
									],
									"id": "d865c3bd-f8e3-4532-a0ec-bb47547b0e99"
								},
								{
									"name": "Search Product By ID - Negative",
									"item": [
										{
											"name": "(testuser@gmail.com) http://localhost:8080/auth/login (testuser@gmail.com)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d65ba736-d351-4b25-9796-7e32b859411a",
														"exec": [
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.globals.set(\"Authorization\", pm.response.headers.get(\"Authorization\"));\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "663cce5b-7da4-4c01-91c3-0d949209e3f7",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"testuser@gmail.com\",\r\n    \"password\": \"password\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/auth/login"
											},
											"response": []
										},
										{
											"name": "http://localhost:8080/api/product/{id} - negative",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "7e692730-d993-456a-92e7-f47084a6e15d",
														"exec": [
															"pm.collectionVariables.set(\"productID\", 10);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "3a8424d6-f5a2-4c10-ae02-b4f11b1fca63",
														"exec": [
															"pm.test(\"Retrived Coat\", () => {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"const responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Product Filter - Negative [Shopping Bag]\", () => {\r",
															"    pm.expect(responseJson.id).to.eql(3);\r",
															"    pm.expect(responseJson.quantity).to.eql(20);\r",
															"    pm.expect(responseJson.price).to.eql(2.5);\r",
															"    pm.expect(responseJson.description).to.eql(\"A reusable shopping bag\");\r",
															"    pm.expect(responseJson.image).to.eql(\"https://images.ctfassets.net/5gvckmvm9289/3BlDoZxSSjqAvv1jBJP7TH/65f9a95484117730ace42abf64e89572/Noissue-x-Creatsy-Tote-Bag-Mockup-Bundle-_4_-2.png\");\r",
															"    pm.expect(responseJson.name).to.eql(\"Shopping Bag\");\r",
															"    pm.expect(responseJson.active).to.eql(true);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "5f3dcf9a-c758-43f4-96aa-e1b8e52057e1",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": "http://localhost:8080/api/product/{{productID}}"
											},
											"response": []
										},
										{
											"name": "http://localhost:8080/api/product/{id} (Negative Test - Searching for non existent productID)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "7e692730-d993-456a-92e7-f47084a6e15d",
														"exec": [
															"pm.collectionVariables.set(\"productID\", 10);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "3a8424d6-f5a2-4c10-ae02-b4f11b1fca63",
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test(\"Response body is empty.\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"\");\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "ac60a59c-efe8-4cbe-9e34-fd1d59a7cf83",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": "http://localhost:8080/api/product/9999999"
											},
											"response": []
										}
									],
									"id": "4d38d898-cca4-4953-a4b4-9e89f906d13b"
								}
							],
							"id": "51f54c96-3adf-4228-a9a3-5339aae624ea"
						},
						{
							"name": "Product Review",
							"item": [
								{
									"name": "Product Reviews - Positive",
									"item": [
										{
											"name": "(testuser@gmail.com) http://localhost:8080/auth/login (testuser@gmail.com)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d65ba736-d351-4b25-9796-7e32b859411a",
														"exec": [
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.globals.set(\"Authorization\", pm.response.headers.get(\"Authorization\"));\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "39a1e396-f0d4-478d-b50b-c09b75d6c5b9",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"testuser@gmail.com\",\r\n    \"password\": \"password\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/auth/login"
											},
											"response": []
										},
										{
											"name": "http://localhost:8080/api/productreview/(Postive test - id of 3)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "73b66b7b-1758-4e10-a378-95a7665417b4",
														"exec": [
															"// get review from shirt\r",
															"\r",
															"// shirt 2\r",
															"pm.collectionVariables.set(\"productID\", 7);\r",
															"\r",
															"// shirt 1\r",
															"//pm.collectionVariables.set(\"productID\", 2);\r",
															"\r",
															"/* \r",
															"    TESTING FOR VIEW PRODUCT REVIEW\r",
															"    ===============================\r",
															"    *** set to test shirt2 ***\r",
															"    testing shirt1\r",
															"        -> comment shirt2\r",
															"        -> uncomment shirt1\r",
															"    testing shirt2\r",
															"        -> leave default\r",
															"*/"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "028f3c43-a38e-4177-b01a-04a069a55804",
														"exec": [
															"pm.test(\"Correct response status\", () => {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"const responseJson = pm.response.json();\r",
															"let userParams = responseJson[0].user;\r",
															"pm.test(\"Checking the response JSON to be correct.\", () => {\r",
															"    pm.expect(responseJson[0].id).to.eql(3);\r",
															"    pm.expect(responseJson[0].rating).to.eql(5);\r",
															"    pm.expect(responseJson[0].comment).to.include(\"Holds the things\");\r",
															"    pm.expect(responseJson[0].postId).to.eql(3);\r",
															" \r",
															"    pm.expect(userParams.userId).to.eql(2);\r",
															"    pm.expect(userParams.email).to.include(\"not\");\r",
															"    pm.expect(userParams.firstName).to.include(\"not\");\r",
															"    pm.expect(userParams.lastName).to.include(\"dude\");\r",
															"    pm.expect(userParams.active).to.eql(true);\r",
															"    pm.expect(userParams.admin).to.eql(false);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "774c7ce0-65f0-4a99-9cca-9fc80573e6a6",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": "http://localhost:8080/api/productreview/3"
											},
											"response": []
										},
										{
											"name": "http://localhost:8080/api/productreview - positive",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1d02819d-0682-4ea1-bfcd-737d5d9ac342",
														"exec": [
															"pm.test(\"Retrived Product Reviews\", () => {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"const responseJson = pm.response.json();\r",
															"\r",
															"// product review for shirt1\r",
															"pm.test(\"Product Review - Positive\", () => {\r",
															"    pm.expect(responseJson[0].id).to.eql(1);\r",
															"    pm.expect(responseJson[0].rating).to.eql(4);\r",
															"    pm.expect(responseJson[0].comment).to.eql(\"This shirt is the best\");\r",
															"    pm.expect(responseJson[0].postId).to.eql(2);\r",
															"});\r",
															"\r",
															"// product review for headphone2\r",
															"pm.test(\"Product Review - Positive\", () => {\r",
															"    pm.expect(responseJson[5].id).to.eql(6);\r",
															"    pm.expect(responseJson[5].rating).to.eql(2);\r",
															"    pm.expect(responseJson[5].comment).to.eql(\"These sound like tin cans\");\r",
															"    pm.expect(responseJson[5].postId).to.eql(6);\r",
															"});\r",
															"\r",
															"// product review for mask\r",
															"pm.test(\"Product Review - Positive\", () => {\r",
															"    pm.expect(responseJson[7].id).to.eql(8);\r",
															"    pm.expect(responseJson[7].rating).to.eql(5);\r",
															"    pm.expect(responseJson[7].comment).to.eql(\"Air is the enemy\");\r",
															"    pm.expect(responseJson[7].postId).to.eql(8);\r",
															"});\r",
															"\r",
															"// product review is incorrect for coat1\r",
															"pm.test(\"Product Review - Positive\", () => {\r",
															"    pm.expect(responseJson[4].id).to.eql(5);\r",
															"    pm.expect(responseJson[4].rating).to.eql(5);\r",
															"    pm.expect(responseJson[4].comment).to.eql(\"A very nice coat\");\r",
															"    pm.expect(responseJson[4].postId).to.eql(5);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "552bf4c9-613b-445c-94f1-faa9d2065f05",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": "http://localhost:8080/api/productreview"
											},
											"response": []
										},
										{
											"name": "http://localhost:8080/api/productreview(Testing for products with id: 3, 4,  10 with deep assert on user object).",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1d02819d-0682-4ea1-bfcd-737d5d9ac342",
														"exec": [
															"const responseJson = pm.response.json();\r",
															"\r",
															"//Product Review for Item 10\r",
															"pm.test(\"Product Review for item with id number 10\", () => {\r",
															"    pm.expect(responseJson[9].id).to.eql(10);\r",
															"    pm.expect(responseJson[9].rating).to.eql(5);\r",
															"    pm.expect(responseJson[9].comment).to.eql(\"So puffy its like a cloud\");\r",
															"    pm.expect(responseJson[9].postId).to.eql(10);\r",
															"    pm.expect(responseJson[9].user.userId).to.eql(2);\r",
															"    pm.expect(responseJson[9].user.email).to.include(\".com\");\r",
															"    pm.expect(responseJson[9].user.firstName).to.include(\"not\");\r",
															"    pm.expect(responseJson[9].user.lastName).to.include(\"dude\");\r",
															"    pm.expect(responseJson[9].user.active).to.eql(true);\r",
															"    pm.expect(responseJson[9].user.admin).to.eql(false);\r",
															"});\r",
															"\r",
															"//Product Review for Item 3\r",
															"pm.test(\"Product Review for item with id number 10\", () => {\r",
															"    pm.expect(responseJson[2].id).to.eql(3);\r",
															"    pm.expect(responseJson[2].rating).to.eql(5);\r",
															"    pm.expect(responseJson[2].comment).to.eql(\"Holds the things\");\r",
															"    pm.expect(responseJson[2].postId).to.eql(3);\r",
															"    pm.expect(responseJson[2].user.userId).to.eql(2);\r",
															"    pm.expect(responseJson[2].user.email).to.include(\".com\");\r",
															"    pm.expect(responseJson[2].user.firstName).to.include(\"not\");\r",
															"    pm.expect(responseJson[2].user.lastName).to.include(\"dude\");\r",
															"    pm.expect(responseJson[2].user.active).to.eql(true);\r",
															"    pm.expect(responseJson[2].user.admin).to.eql(false);\r",
															"});\r",
															"\r",
															"//Product Review for Item 4\r",
															"pm.test(\"Product Review for item with id number 10\", () => {\r",
															"    pm.expect(responseJson[3].id).to.eql(4);\r",
															"    pm.expect(responseJson[3].rating).to.eql(1);\r",
															"    pm.expect(responseJson[3].comment).to.eql(\"Cool beans\");\r",
															"    pm.expect(responseJson[3].postId).to.eql(4);\r",
															"    pm.expect(responseJson[3].user.userId).to.eql(2);\r",
															"    pm.expect(responseJson[3].user.email).to.include(\".com\");\r",
															"    pm.expect(responseJson[3].user.firstName).to.include(\"not\");\r",
															"    pm.expect(responseJson[3].user.lastName).to.include(\"dude\");\r",
															"    pm.expect(responseJson[3].user.active).to.eql(true);\r",
															"    pm.expect(responseJson[3].user.admin).to.eql(false);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "1d7f2c49-d718-4a3f-b5d4-90a2b053e08a",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": "http://localhost:8080/api/productreview"
											},
											"response": []
										}
									],
									"id": "47f8830a-4fc8-465e-99b0-4d2d39583cf0"
								},
								{
									"name": "Product Reviews - Negative",
									"item": [
										{
											"name": "(testuser@gmail.com) http://localhost:8080/auth/login (testuser@gmail.com)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d65ba736-d351-4b25-9796-7e32b859411a",
														"exec": [
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.globals.set(\"Authorization\", pm.response.headers.get(\"Authorization\"));\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "eb664489-8404-4289-9f8e-c64aed1cbce2",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"testuser@gmail.com\",\r\n    \"password\": \"password\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/auth/login"
											},
											"response": []
										},
										{
											"name": "http://localhost:8080/api/productreview(Negative Test - For non-existent fake product)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "dec009e1-a444-4e11-81c5-5f69d3ae1b62",
														"exec": [
															"pm.test(\"Retrived All Product Review\", () => {\r",
															"    pm.response.to.have.status(500);\r",
															"});\r",
															"\r",
															" \r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "834c9d5a-eae0-4516-8073-6640d3047d49",
														"exec": [
															"//Create variable here to increment"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "7029cb03-fc69-4ad6-ac65-a19886d651a6",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "{{Authorization}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": 99999,\r\n    \"rating\": 99999,\r\n    \"comment\": \"fake review\",\r\n    \"postId\": 99999\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/api/productreview"
											},
											"response": []
										},
										{
											"name": "http://localhost:8080/api/productreview - negative",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1d02819d-0682-4ea1-bfcd-737d5d9ac342",
														"exec": [
															"pm.test(\"Retrived Product Reviews\", () => {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"const responseJson = pm.response.json();\r",
															"\r",
															"// product review for shirt1\r",
															"pm.test(\"Product Review - Negative\", () => {\r",
															"    pm.expect(responseJson[0].id).to.eql(1);\r",
															"    pm.expect(responseJson[0].rating).to.eql(4);\r",
															"    pm.expect(responseJson[0].comment).to.eql(\"This shirt is to lame\");\r",
															"    pm.expect(responseJson[0].postId).to.eql(2);\r",
															"});\r",
															"\r",
															"// product review for headphone2\r",
															"pm.test(\"Product Review - Negative\", () => {\r",
															"    pm.expect(responseJson[5].id).to.eql(6);\r",
															"    pm.expect(responseJson[5].rating).to.eql(2);\r",
															"    pm.expect(responseJson[5].comment).to.eql(\"These sound like a church organ playing\");\r",
															"    pm.expect(responseJson[5].postId).to.eql(6);\r",
															"});\r",
															"\r",
															"// product revuew for mask\r",
															"pm.test(\"Product Review - Negative\", () => {\r",
															"    pm.expect(responseJson[7].id).to.eql(8);\r",
															"    pm.expect(responseJson[7].rating).to.eql(5);\r",
															"    pm.expect(responseJson[7].comment).to.eql(\"Air is the best\");\r",
															"    pm.expect(responseJson[7].postId).to.eql(8);\r",
															"});\r",
															"\r",
															"// product review is incorrect for coat1\r",
															"pm.test(\"Product Review - Negative\", () => {\r",
															"    pm.expect(responseJson[4].id).to.eql(5);\r",
															"    pm.expect(responseJson[4].rating).to.eql(5);\r",
															"    pm.expect(responseJson[4].comment).to.eql(\"An itchy coat\");\r",
															"    pm.expect(responseJson[4].postId).to.eql(5);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "364fcf6c-621f-41ea-8dad-59142b0997ba",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": "http://localhost:8080/api/productreview"
											},
											"response": []
										},
										{
											"name": "http://localhost:8080/api/productreview/rate/{FakeID}/{FakeRating} (Negative Testing)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "83d3bd83-1bb4-4666-955a-0e8e4ca83058",
														"exec": [
															"pm.collectionVariables.set(\"productID\", 7);\r",
															"pm.collectionVariables.set(\"productRating\", 4);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "96862fef-7d95-48a8-8c8d-2e4071f5aadc",
														"exec": [
															"pm.test(\"Status code is 404.\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test(\"Body should be correct.\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Invalid ID or Invalid Rating\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "da70bdd1-e359-4bc3-b454-2d345fb3e08e",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": "http://localhost:8080/api/productreview/rate/555/45"
											},
											"response": []
										}
									],
									"id": "fc218c78-dc7d-4e88-b8c9-609115b6907f"
								},
								{
									"name": "Get Product Average - Positive",
									"item": [
										{
											"name": "(testuser@gmail.com) http://localhost:8080/auth/login (testuser@gmail.com)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d65ba736-d351-4b25-9796-7e32b859411a",
														"exec": [
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.globals.set(\"Authorization\", pm.response.headers.get(\"Authorization\"));\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "5dd97580-d889-4eb4-94ad-e30fdf34d3f5",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"testuser@gmail.com\",\r\n    \"password\": \"password\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/auth/login"
											},
											"response": []
										},
										{
											"name": "http://localhost:8080/api/productreview/avr/{id} - positive",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "0f3521a6-e195-49da-91a5-701461dac9e5",
														"exec": [
															"pm.collectionVariables.set(\"productID\", 8);\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "eefb4cea-bca3-4204-8ad9-20e88d7f408d",
														"exec": [
															"pm.test(\"Retrived Product Review Average\", () => {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"const responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Average Rating - Positive\", () => {\r",
															"    pm.expect(responseJson).to.eql(5);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "78de75e7-1c88-45f9-94a3-9f996530772b",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "{{Authorization}}",
														"type": "text"
													}
												],
												"url": "http://localhost:8080/api/productreview/avr/{{productID}}"
											},
											"response": []
										},
										{
											"name": "http://localhost:8080/api/productreview/(Negative Test for fake id)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "3c075d35-45c4-4fb8-b228-c593b830d51d",
														"exec": [
															"// get average review rating\r",
															"\r",
															"// avg review for mask\r",
															"pm.collectionVariables.set(\"productID\", 8);\r",
															"\r",
															"// avg review for headphone1\r",
															"//pm.collectionVariables.set(\"productID\", 1);\r",
															"\r",
															"/* \r",
															"    TESTING FOR AVERAGE REVIEW RATE\r",
															"    ===============================\r",
															"    *** set to test postive ***\r",
															"    testing postive\r",
															"        -> leave default\r",
															"    testing negative\r",
															"        -> comment mask\r",
															"        -> uncomment headphone1\r",
															"*/"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "adbd7572-e2b4-44e8-a1ca-bf58f8ff0cd5",
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test(\"Body should return invalid id\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Invalid product id.\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "a3e80899-c0f8-4f66-9ab1-3df022d384f9",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "{{Authorization}}",
														"type": "text"
													}
												],
												"url": "http://localhost:8080/api/productreview/avr/9999999"
											},
											"response": []
										}
									],
									"id": "2a9419fd-2944-4575-9092-0e68971e5c58"
								},
								{
									"name": "Get Product Average - Negative",
									"item": [
										{
											"name": "(testuser@gmail.com) http://localhost:8080/auth/login (testuser@gmail.com)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d65ba736-d351-4b25-9796-7e32b859411a",
														"exec": [
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.globals.set(\"Authorization\", pm.response.headers.get(\"Authorization\"));\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "411ce587-4bd4-4656-a7c9-903590346b38",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"testuser@gmail.com\",\r\n    \"password\": \"password\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/auth/login"
											},
											"response": []
										},
										{
											"name": "http://localhost:8080/api/productreview/avr/{id} - negative",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "0f3521a6-e195-49da-91a5-701461dac9e5",
														"exec": [
															"pm.collectionVariables.set(\"productID\", 8);\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "eefb4cea-bca3-4204-8ad9-20e88d7f408d",
														"exec": [
															"pm.test(\"Retrived Product Review Average\", () => {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"const responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Average Rating - Negative\", () => {\r",
															"    pm.expect(responseJson).to.eql(1);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "cb7a9af6-b48e-43c7-975d-9ed5875c1488",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "{{Authorization}}",
														"type": "text"
													}
												],
												"url": "http://localhost:8080/api/productreview/avr/{{productID}}"
											},
											"response": []
										},
										{
											"name": "http://localhost:8080/api/productreview/avr/id(Positive Test)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "0f3521a6-e195-49da-91a5-701461dac9e5",
														"exec": [
															"pm.collectionVariables.set(\"productID\", 8);\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "eefb4cea-bca3-4204-8ad9-20e88d7f408d",
														"exec": [
															"pm.test(\"Retrived Product Review Average\", () => {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"const responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Average rating should be zero.\", () => {\r",
															"    pm.expect(responseJson).to.eql(0);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "41f62e84-d38d-45e4-a675-796395d11005",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "{{Authorization}}",
														"type": "text"
													}
												],
												"url": "http://localhost:8080/api/productreview/avr/20"
											},
											"response": []
										}
									],
									"id": "6f41fb5e-e291-4cc6-976c-9cb3431ece1f"
								},
								{
									"name": "Check Can Post Review - isUser",
									"item": [
										{
											"name": "(testuser@gmail.com) http://localhost:8080/auth/login (testuser@gmail.com)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d65ba736-d351-4b25-9796-7e32b859411a",
														"exec": [
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.globals.set(\"Authorization\", pm.response.headers.get(\"Authorization\"));\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "e0cb20e6-b114-4782-8182-d90f7fc97945",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"testuser@gmail.com\",\r\n    \"password\": \"password\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/auth/login"
											},
											"response": []
										},
										{
											"name": "http://localhost:8080/api/productreview/post/{post_id}/{user_id}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "97724644-400d-4463-9a69-edabdeb40f25",
														"exec": [
															"pm.collectionVariables.set(\"productPostID\", 6);\r",
															"pm.collectionVariables.set(\"productUserID\", 2);\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "95eb194c-e6a5-4b4a-8f54-cbe1b893a660",
														"exec": [
															"pm.test(\"User Can Post\", () => {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"const responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Can Post -> User\", () => {\r",
															"    pm.expect(responseJson).to.eql(true);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "aad4e605-8de5-44d4-92c5-6dbc0e05541b",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "{{Authorization}}",
														"type": "text"
													}
												],
												"url": "http://localhost:8080/api/productreview/post/{{productPostID}}/{{productUserID}}"
											},
											"response": []
										},
										{
											"name": "http://localhost:8080/api/productreview/post/{post_id}/{user_id}Fake post id review",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "97724644-400d-4463-9a69-edabdeb40f25",
														"exec": [
															"pm.collectionVariables.set(\"productPostID\", 6);\r",
															"pm.collectionVariables.set(\"productUserID\", 2);\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "95eb194c-e6a5-4b4a-8f54-cbe1b893a660",
														"exec": [
															"pm.test(\"Status is 200\", () => {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"const responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"The post is connected to a user\", () => {\r",
															"    pm.expect(responseJson).to.eql(false);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "fb817483-133c-41dd-b567-3bc9d08006ea",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "{{Authorization}}",
														"type": "text"
													}
												],
												"url": "http://localhost:8080/api/productreview/post/9/{{productUserID}}"
											},
											"response": []
										},
										{
											"name": "http://localhost:8080/api/productreview/post/(FakePostID)/(FakeUserID)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "97724644-400d-4463-9a69-edabdeb40f25",
														"exec": [
															"pm.collectionVariables.set(\"productPostID\", 6);\r",
															"pm.collectionVariables.set(\"productUserID\", 1);\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "95eb194c-e6a5-4b4a-8f54-cbe1b893a660",
														"exec": [
															"pm.test(\"Response code is 200\", () => {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"const responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Response body is true.\", () => {\r",
															"    pm.expect(responseJson).to.eql(true);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "efbef240-fa34-4b52-b210-c299d86d07a5",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "{{Authorization}}",
														"type": "text"
													}
												],
												"url": "http://localhost:8080/api/productreview/post/9999/9999"
											},
											"response": []
										}
									],
									"id": "eb5fcd8a-020a-42b3-867b-5098ae2b716a"
								},
								{
									"name": "Check Can't Post Review - isAdmin",
									"item": [
										{
											"name": "(testuser@gmail.com) http://localhost:8080/auth/login (testuser@gmail.com)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d65ba736-d351-4b25-9796-7e32b859411a",
														"exec": [
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.globals.set(\"Authorization\", pm.response.headers.get(\"Authorization\"));\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "cffd4157-1d39-465b-b06d-04d535e91ec7",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"testuser@gmail.com\",\r\n    \"password\": \"password\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/auth/login"
											},
											"response": []
										},
										{
											"name": "http://localhost:8080/api/productreview/post/{post_id}/{user_id}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "97724644-400d-4463-9a69-edabdeb40f25",
														"exec": [
															"pm.collectionVariables.set(\"productPostID\", 6);\r",
															"pm.collectionVariables.set(\"productUserID\", 1);\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "95eb194c-e6a5-4b4a-8f54-cbe1b893a660",
														"exec": [
															"pm.test(\"Admin Can't Post\", () => {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"const responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Can't Post -> Admin \", () => {\r",
															"    pm.expect(responseJson).to.eql(false);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "825c3877-3749-448a-981e-ee3e0a2f6bae",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "{{Authorization}}",
														"type": "text"
													}
												],
												"url": "http://localhost:8080/api/productreview/post/{{productPostID}}/{{productUserID}}"
											},
											"response": []
										}
									],
									"id": "8edd4cae-e8f0-4be2-a3d0-cd454a4288b3"
								},
								{
									"name": "Get Product By ID - Positive",
									"item": [
										{
											"name": "(testuser@gmail.com) http://localhost:8080/auth/login (testuser@gmail.com)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d65ba736-d351-4b25-9796-7e32b859411a",
														"exec": [
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.globals.set(\"Authorization\", pm.response.headers.get(\"Authorization\"));\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "aaa94ebd-1b6e-4e40-837a-b4add0cd455e",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"testuser@gmail.com\",\r\n    \"password\": \"password\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/auth/login"
											},
											"response": []
										},
										{
											"name": "http://localhost:8080/api/productreview/{id} - positive",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "73b66b7b-1758-4e10-a378-95a7665417b4",
														"exec": [
															"pm.collectionVariables.set(\"productID\", 7);\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "028f3c43-a38e-4177-b01a-04a069a55804",
														"exec": [
															"pm.test(\"Retrived Product Review\", () => {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"const responseJson = pm.response.json();\r",
															"let userParams = responseJson[0].user;\r",
															"\r",
															"pm.test(\"Product Review - Positive\", () => {\r",
															"    // product review\r",
															"    pm.expect(responseJson[0].id).to.eql(7);\r",
															"    pm.expect(responseJson[0].rating).to.eql(4);\r",
															"    pm.expect(responseJson[0].comment).to.eql(\"A vote for me is a vote for this shirt\");\r",
															"    pm.expect(responseJson[0].postId).to.eql(7);\r",
															"    // user connected\r",
															"    pm.expect(userParams.userId).to.eql(1);\r",
															"    pm.expect(userParams.email).to.eql(\"testuser@gmail.com\");\r",
															"    pm.expect(userParams.firstName).to.eql(\"Testerson\");\r",
															"    pm.expect(userParams.lastName).to.eql(\"Usertown\");\r",
															"    pm.expect(userParams.active).to.eql(true);\r",
															"    pm.expect(userParams.admin).to.eql(true);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "f506e6e7-ffbe-411c-8891-394a5f04c4a2",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": "http://localhost:8080/api/productreview/{{productID}}"
											},
											"response": []
										}
									],
									"id": "77c0290d-312e-4b23-81f3-eea8af64afbe"
								},
								{
									"name": "Get Product By ID - Negative",
									"item": [
										{
											"name": "(testuser@gmail.com) http://localhost:8080/auth/login (testuser@gmail.com)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d65ba736-d351-4b25-9796-7e32b859411a",
														"exec": [
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.globals.set(\"Authorization\", pm.response.headers.get(\"Authorization\"));\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "c10d34b0-2148-46ed-8858-8abee8dc0d15",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"testuser@gmail.com\",\r\n    \"password\": \"password\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/auth/login"
											},
											"response": []
										},
										{
											"name": "http://localhost:8080/api/productreview/{id} - negative",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "73b66b7b-1758-4e10-a378-95a7665417b4",
														"exec": [
															"pm.collectionVariables.set(\"productID\", 7);\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "028f3c43-a38e-4177-b01a-04a069a55804",
														"exec": [
															"pm.test(\"Retrived Product Review\", () => {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"const responseJson = pm.response.json();\r",
															"let userParams = responseJson[0].user;\r",
															"\r",
															"pm.test(\"Product Review - Negative\", () => {\r",
															"    // product review\r",
															"    pm.expect(responseJson[0].id).to.eql(1);\r",
															"    pm.expect(responseJson[0].rating).to.eql(4);\r",
															"    pm.expect(responseJson[0].comment).to.eql(\"This shirt is the best\");\r",
															"    pm.expect(responseJson[0].postId).to.eql(2);\r",
															"    // user connected\r",
															"    pm.expect(userParams.userId).to.eql(1);\r",
															"    pm.expect(userParams.email).to.eql(\"testuser@gmail.com\");\r",
															"    pm.expect(userParams.firstName).to.eql(\"Testerson\");\r",
															"    pm.expect(userParams.lastName).to.eql(\"Usertown\");\r",
															"    pm.expect(userParams.active).to.eql(true);\r",
															"    pm.expect(userParams.admin).to.eql(true);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "313dc82f-f720-4d29-af73-c8d61fea92c3",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": "http://localhost:8080/api/productreview/{{productID}}"
											},
											"response": []
										}
									],
									"id": "8b89216f-1caa-4235-b748-8f429402d300"
								},
								{
									"name": "Get Product by ID & Rating - Positive",
									"item": [
										{
											"name": "(testuser@gmail.com) http://localhost:8080/auth/login (testuser@gmail.com) Copy 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d65ba736-d351-4b25-9796-7e32b859411a",
														"exec": [
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.globals.set(\"Authorization\", pm.response.headers.get(\"Authorization\"));\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "15a144a3-9008-4d15-9f2e-1f8cbc3dc827",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"testuser@gmail.com\",\r\n    \"password\": \"password\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/auth/login"
											},
											"response": []
										},
										{
											"name": "http://localhost:8080/api/productreview/rate/{id}/{rating} - positive",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "83d3bd83-1bb4-4666-955a-0e8e4ca83058",
														"exec": [
															"pm.collectionVariables.set(\"productID\", 7);\r",
															"pm.collectionVariables.set(\"productRating\", 4);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "96862fef-7d95-48a8-8c8d-2e4071f5aadc",
														"exec": [
															"pm.test(\"Retrived Product\", () => {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Check Product ID & Rating - Postive\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson[0].id).to.eql(7);\r",
															"    pm.expect(responseJson[0].rating).to.eql(4);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "13a59d1a-0610-4df4-88e9-dfd9148398f9",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": "http://localhost:8080/api/productreview/rate/{{productID}}/{{productRating}}"
											},
											"response": []
										}
									],
									"id": "5e162f93-5f0d-414f-a45c-10a3a0bc0db0"
								},
								{
									"name": "Get Product by ID & Rating - Negative",
									"item": [
										{
											"name": "(testuser@gmail.com) http://localhost:8080/auth/login (testuser@gmail.com) Copy 4",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d65ba736-d351-4b25-9796-7e32b859411a",
														"exec": [
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.globals.set(\"Authorization\", pm.response.headers.get(\"Authorization\"));\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "c9e4e59d-75a7-446b-99a0-81ce0fdf84f7",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"testuser@gmail.com\",\r\n    \"password\": \"password\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/auth/login"
											},
											"response": []
										},
										{
											"name": "http://localhost:8080/api/productreview/rate/{Fakeid}/{Fakerating} - negative",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "83d3bd83-1bb4-4666-955a-0e8e4ca83058",
														"exec": [
															"pm.collectionVariables.set(\"productID\", 7);\r",
															"pm.collectionVariables.set(\"productRating\", 4);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "96862fef-7d95-48a8-8c8d-2e4071f5aadc",
														"exec": [
															"pm.test(\"Correct Status Code\", () => {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Body should be empty\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "b48f951f-1b3a-4a5e-a264-88679ce53f6f",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": "http://localhost:8080/api/productreview/rate/99999/99999"
											},
											"response": []
										}
									],
									"id": "d21ce6f0-65fb-4671-8a74-91cae42fbe19"
								},
								{
									"name": "Create Review, Then Delete Review",
									"item": [
										{
											"name": "(testuser@gmail.com) http://localhost:8080/auth/login (testuser@gmail.com)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d65ba736-d351-4b25-9796-7e32b859411a",
														"exec": [
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.globals.set(\"Authorization\", pm.response.headers.get(\"Authorization\"));\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "d1ece7db-b038-4999-b82d-cb317b03fae2",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"testuser@gmail.com\",\r\n    \"password\": \"password\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/auth/login"
											},
											"response": []
										},
										{
											"name": "http://localhost:8080/api/productreview - For Manual Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1d02819d-0682-4ea1-bfcd-737d5d9ac342",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "2b1bee73-eaa1-47a8-9f1e-830e05c9b397",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": "http://localhost:8080/api/productreview"
											},
											"response": []
										},
										{
											"name": "http://localhost:8080/api/productreview/{id} - Previous",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "f926a33b-bee9-4f0c-bc75-bada8d689d77",
														"exec": [
															"/*\r",
															"    INSTRUCTIONS ON USING THIS TEST CASE\r",
															"        - CONDUCT PUT REQUEST\r",
															"        - CHECK ID IN PRODUCT REVIEW GET REQUEST [MANUAL CHECK]\r",
															"        - GET PRODUCTID FROM LAST ELEMENT\r",
															"        - CHANGE PRODUCTID TO THAT PRODUCTID FOUND\r",
															"        - SAVE CHANGES\r",
															"*/\r",
															"\r",
															"pm.collectionVariables.set(\"productID\", 10);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "50443497-7121-4622-95df-a268f95e947a",
														"exec": [
															"pm.test(\"Product Review Deleted\", () => {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "07aa969f-52c9-4a3b-bd78-6eb16dfb3e78",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "{{Authorization}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://localhost:8080/api/productreview/{{productID}}"
											},
											"response": []
										},
										{
											"name": "http://localhost:8080/api/productreview",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "dec009e1-a444-4e11-81c5-5f69d3ae1b62",
														"exec": [
															"pm.test(\"Retrived All Product Review\", () => {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "802dc4df-26af-41c7-aea1-f74d94a1eeb4",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "{{Authorization}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": 10,\r\n    \"rating\": 5,\r\n    \"comment\": \"So puffy its like a cloud\",\r\n    \"postId\": 10\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/api/productreview"
											},
											"response": []
										},
										{
											"name": "http://localhost:8080/api/productreview - Check New",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1d02819d-0682-4ea1-bfcd-737d5d9ac342",
														"exec": [
															"// connection check\r",
															"pm.test(\"Retrived New Product Review\", () => {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"const responseJson = pm.response.json();\r",
															"\r",
															"// product review for shirt1\r",
															"pm.test(\"New Product Review Found\", () => {\r",
															"    pm.expect(responseJson[9].rating).to.eql(5);\r",
															"    pm.expect(responseJson[9].comment).to.eql(\"So puffy its like a cloud\");\r",
															"    pm.expect(responseJson[9].postId).to.eql(10);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "1c586ef0-ae29-4ea1-9140-e28bc4755897",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": "http://localhost:8080/api/productreview"
											},
											"response": []
										},
										{
											"name": "http://localhost:8080/api/productreview/{id} - New",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "f926a33b-bee9-4f0c-bc75-bada8d689d77",
														"exec": [
															"/*\r",
															"    INSTRUCTIONS ON USING THIS TEST CASE\r",
															"        - CHECK ID SET IN PREVOUS DELETE REQUEST\r",
															"        - REPLACE ID WITH [CURRENT ID + 1]\r",
															"        - SAVE CHANGES\r",
															"*/\r",
															"\r",
															"pm.collectionVariables.set(\"productID\", 11);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "50443497-7121-4622-95df-a268f95e947a",
														"exec": [
															"pm.test(\"Product Review Deleted\", () => {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "6e3d5ca2-306f-480d-9631-5a652fb38aff",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "{{Authorization}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://localhost:8080/api/productreview/{{productID}}"
											},
											"response": []
										}
									],
									"id": "90a022ed-f0e3-44b2-ba66-a070b66f45e1"
								}
							],
							"id": "85d5b951-5253-4b2c-b991-edcd13e5caf9"
						},
						{
							"name": "Product Admin",
							"item": [
								{
									"name": "Delete Products",
									"item": [
										{
											"name": "(testuser@gmail.com) http://localhost:8080/auth/login (testuser@gmail.com)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d65ba736-d351-4b25-9796-7e32b859411a",
														"exec": [
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.globals.set(\"Authorization\", pm.response.headers.get(\"Authorization\"));\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "2b861e58-2597-4dee-8027-2d8250074f79",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"testuser@gmail.com\",\r\n    \"password\": \"password\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/auth/login"
											},
											"response": []
										},
										{
											"name": "http://localhost:8080/api/product/{id}(Positive Test-Product Does Exist)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "05fb4cf9-7559-436f-96e6-1e9ba19e9efd",
														"exec": [
															"",
															"pm.test(\"Response body contains name.\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"name\");",
															"});",
															"",
															"pm.test(\"Response body contains image description.\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"image\");",
															"});",
															" ",
															"pm.test(\"Response body contains description.\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"description\");",
															"});",
															"",
															" pm.test(\"Response body contains quantity.\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"quantity\");",
															"});",
															"",
															"pm.test(\"Status code is 200 Correct\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "dd8729f0-262a-455b-9e06-14524e3bf40b",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "{{Authorization}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/api/product/5"
											},
											"response": []
										},
										{
											"name": "http://localhost:8080/api/product/{id}(Negative Test-Product Does Not Exist) Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "05fb4cf9-7559-436f-96e6-1e9ba19e9efd",
														"exec": [
															"pm.test(\"Response body is empty.\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"\");",
															"});",
															"",
															"pm.test(\"Status code is a 404 error.\", function () {",
															"    pm.response.to.have.status(404);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "971d030b-dbd4-4e5d-a973-5b560d69c3d9",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "{{Authorization}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/api/product/100"
											},
											"response": []
										}
									],
									"id": "4b7f55c5-e054-4dcc-9605-e388ac68d6bf"
								},
								{
									"name": "Delete Products Copy",
									"item": [
										{
											"name": "(testuser@gmail.com) http://localhost:8080/auth/login (testuser@gmail.com)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d65ba736-d351-4b25-9796-7e32b859411a",
														"exec": [
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.globals.set(\"Authorization\", pm.response.headers.get(\"Authorization\"));\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "3ed2a238-ac14-4609-b7b3-c98ebbef3c02",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"testuser@gmail.com\",\r\n    \"password\": \"password\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/auth/login"
											},
											"response": []
										},
										{
											"name": "http://localhost:8080/api/product/{id}(Positive Test-Product Does Exist)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "05fb4cf9-7559-436f-96e6-1e9ba19e9efd",
														"exec": [
															"",
															"pm.test(\"Response body contains name.\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"name\");",
															"});",
															"",
															"pm.test(\"Response body contains image description.\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"image\");",
															"});",
															" ",
															"pm.test(\"Response body contains description.\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"description\");",
															"});",
															"",
															" pm.test(\"Response body contains quantity.\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"quantity\");",
															"});",
															"",
															"pm.test(\"Status code is 200 Correct\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "c8ce9754-3cc3-4878-a9c3-1a9f7e07e619",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "{{Authorization}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/api/product/5"
											},
											"response": []
										},
										{
											"name": "http://localhost:8080/api/product/{id}(Negative Test-Product Does Not Exist) Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "05fb4cf9-7559-436f-96e6-1e9ba19e9efd",
														"exec": [
															"pm.test(\"Response body is empty.\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"\");",
															"});",
															"",
															"pm.test(\"Status code is a 404 error.\", function () {",
															"    pm.response.to.have.status(404);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "97d25625-f222-4712-b0d7-0f548a88bd9d",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "{{Authorization}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/api/product/100"
											},
											"response": []
										}
									],
									"id": "88f9c8d9-ba5c-49f9-b3d3-40664895afbe"
								},
								{
									"name": "Put Products (Not Admin Test)",
									"item": [
										{
											"name": "(notadmin@gmail.com) http://localhost:8080/auth/login",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d65ba736-d351-4b25-9796-7e32b859411a",
														"exec": [
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.globals.set(\"Authorization\", pm.response.headers.get(\"Authorization\"));\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "6c27fea3-d9f2-4d95-9a56-0d046e743819",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"notadmin@gmail.com\",\r\n    \"password\": \"password\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/auth/login"
											},
											"response": []
										},
										{
											"name": "http://localhost:8080/api/product",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fb6ad74e-e9fd-4356-be39-69769eeb487d",
														"exec": [
															"pm.test(\"Status code is 401 because the USER is not an admin\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "f7362283-7be0-4986-8745-b2c6ed0e51f2",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "{{Authorization}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": 20,\r\n    \"name\": \"TeeShirt\",\r\n    \"quantity\": 5,\r\n    \"description\": \"irt\",\r\n    \"price\": 45.0,\r\n    \"image\": \"https://d3o2e4jr3mxnm3.cloudfront.net/Mens-Jake-Guitar-Vintage-Crusher-Tee_68382_1_lg.png\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/api/product"
											},
											"response": []
										},
										{
											"name": "http://localhost:8080/auth/logout Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "013e39b9-de82-4332-a3eb-50c24e8fcc75",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "907807b1-57ed-4e59-bb5e-0ec6f80bdbe1",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"url": "http://localhost:8080/auth/logout"
											},
											"response": []
										}
									],
									"id": "00a18f9e-57c0-42bb-9a33-8c3b8cc5ae86"
								},
								{
									"name": "Put Products",
									"item": [
										{
											"name": "(testuser@gmail.com) http://localhost:8080/auth/login",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d65ba736-d351-4b25-9796-7e32b859411a",
														"exec": [
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.globals.set(\"Authorization\", pm.response.headers.get(\"Authorization\"));\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "1efae477-6392-4460-9764-454039c16b56",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"testuser@gmail.com\",\r\n    \"password\": \"password\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/auth/login"
											},
											"response": []
										},
										{
											"name": "http://localhost:8080/api/product",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5b49e19d-9397-43c0-abcf-aa89ad6f07cb",
														"exec": [
															"pm.test(\"Status code is 200 and item is returned\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Body is correct\", function () {\r",
															"        pm.expect(pm.response.text()).to.contain(\"Unique Teapot\");\r",
															"        pm.expect(pm.response.text()).to.contain(\"https://cdn.shopify.com/static/sample-images/teapot.jpg\");\r",
															"        pm.expect(pm.response.text()).to.contain(\"Cup\");\r",
															"        pm.expect(pm.response.text()).to.contain(false);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "36d6bca8-ae1f-4b18-b3e7-6e52f714b4b2",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "{{Authorization}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{   \r\n    \"id\": 20,\r\n    \"quantity\": 1,\r\n    \"price\": 1000000.00,\r\n    \"description\": \"Unique Teapot\",\r\n    \"image\": \"https://cdn.shopify.com/static/sample-images/teapot.jpg\",\r\n    \"name\": \"Cup\",\r\n    \"active\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/api/product"
											},
											"response": []
										},
										{
											"name": "http://localhost:8080/auth/logout Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "013e39b9-de82-4332-a3eb-50c24e8fcc75",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "f3a851d2-fc61-447e-a820-87c30aa7f0e2",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"url": "http://localhost:8080/auth/logout"
											},
											"response": []
										}
									],
									"id": "a8e62bac-d207-4be4-8d9f-aa16b4286795"
								},
								{
									"name": "Patch Product Inventory",
									"item": [
										{
											"name": "(current set) http://localhost:8080/api/product Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a5b77703-860d-4ad8-a2a2-3024cb2dba83",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "83d826b0-78b5-4658-86be-735bb9261d87",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": "http://localhost:8080/api/product"
											},
											"response": []
										},
										{
											"name": "(negative)http://localhost:8080/api/product",
											"id": "a002684d-98c5-4896-8ad8-7fb03484a127",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[\r\n    {\r\n        \"id\": 1,\r\n        \"quantity\": 1\r\n    }\r\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": ")http://localhost:8080/api/product"
											},
											"response": []
										}
									],
									"id": "4aa8de11-65f6-4f74-b571-6cc34d3e3b00"
								},
								{
									"name": "Patch Product Inventory Copy",
									"item": [
										{
											"name": "(current set) http://localhost:8080/api/product Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a5b77703-860d-4ad8-a2a2-3024cb2dba83",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "20b02cf6-22c5-4cc3-9492-bf0774512eb5",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": "http://localhost:8080/api/product"
											},
											"response": []
										},
										{
											"name": "(negative)http://localhost:8080/api/product",
											"id": "44d191cd-8b4b-42a5-8a19-6c087a98602d",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[\r\n    {\r\n        \"id\": 1,\r\n        \"quantity\": 1\r\n    }\r\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": ")http://localhost:8080/api/product"
											},
											"response": []
										}
									],
									"id": "ccceec40-9e24-4a75-b79d-670144df84db"
								}
							],
							"id": "8a94dbcc-9808-4943-9aec-3f46b099ce2b"
						}
					],
					"id": "05d51adc-f9a8-4fd3-aee9-d75e247b0886"
				},
				{
					"name": "Order and payment",
					"item": [
						{
							"name": "OrderController Tests",
							"item": [
								{
									"name": "(testuser@gmail.com) http://localhost:8080/auth/login (testuser@gmail.com) Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d65ba736-d351-4b25-9796-7e32b859411a",
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.globals.set(\"Authorization\", pm.response.headers.get(\"Authorization\"));\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "1808150e-91c6-412d-9a7b-aac1dd367341",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"testuser@gmail.com\",\r\n    \"password\": \"password\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "http://localhost:8080/auth/login"
									},
									"response": []
								},
								{
									"name": "create new order for logged in user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52bbe7b9-fbcb-483f-a675-f5f1ccd88f2b",
												"exec": [
													"pm.test(\"Status code correct.\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"User email correct.\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"testuser@gmail.com\");",
													"});",
													"",
													"pm.test(\"paymentID correct.\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.paymentId).to.eql(\"safecard111\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "30b08b2e-c5c5-46a8-8ed0-1c790c2ce4d2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{Authorization}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"paymentId\": \"3\",\n  \"shipmentAddress\": \"9999888877776666\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "http://localhost:8080/api/order"
									},
									"response": []
								},
								{
									"name": "get order history for logged in user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8d3dd7bd-16ed-4896-8679-a78b5ba0a94c",
												"exec": [
													"pm.test(\"Status code is correct.\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"User email correct.\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"testuser@gmail.com\");",
													"});",
													"",
													"pm.test(\"paymentID correct.\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[0].paymentId).to.eql(\"safecard111\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "0c1889f7-46d8-4e9c-99e3-db32d0056969",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{Authorization}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://localhost:8080/api/order/history?",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"order",
												"history"
											],
											"query": [
												{
													"key": "",
													"value": null
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "get information about specific order",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1a4bfe9b-57bc-42d0-a7cc-2441ff7ae3bd",
												"exec": [
													"pm.test(\"Status code is correct\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"User email correct.\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"testuser@gmail.com\");",
													"});",
													"",
													"pm.test(\"PaymentID correct.\", function () {",
													"      pm.expect(pm.response.text()).to.contain(\"9999888877776666\");",
													" });",
													"",
													" pm.test(\"User is active.\", function () {",
													"      pm.expect(pm.response.text()).to.contain(true);",
													" });",
													"",
													"  pm.test(\"Reset password token is null.\", function () {",
													"      pm.expect(pm.response.text()).to.contain(null);",
													" });"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "763fda00-92af-4096-bc87-548ba4a8dfb8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{Authorization}}",
												"type": "text"
											},
											{
												"key": "OrderID",
												"value": "2",
												"type": "text",
												"disabled": true
											}
										],
										"url": "http://localhost:8080/api/order/1"
									},
									"response": []
								},
								{
									"name": "get all orders",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "40e4ed73-74a9-412c-bba3-f3fb565821f4",
												"exec": [
													"pm.test(\"Status code correct\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"  pm.test(\"PaymentID correct.\", function () {",
													"      pm.expect(pm.response.text()).to.contain(\"safecard111\");",
													" });",
													"",
													"   pm.test(\"Date correct on card.\", function () {",
													"      pm.expect(pm.response.text()).to.contain(\"2022-12-05\");",
													" });"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "cfbef407-d0bf-4e5b-b264-ec81460f6253",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{Authorization}}",
												"type": "text"
											}
										],
										"url": "http://localhost:8080/api/order"
									},
									"response": []
								}
							],
							"id": "6bb6f298-0d62-4492-81c9-772247aa55c8"
						},
						{
							"name": "OrderDetail Tests",
							"item": [
								{
									"name": "Create new detail and check if it was created, then delete it",
									"item": [
										{
											"name": "(testuser@gmail.com) http://localhost:8080/auth/login (testuser@gmail.com) Copy 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d65ba736-d351-4b25-9796-7e32b859411a",
														"exec": [
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.globals.set(\"Authorization\", pm.response.headers.get(\"Authorization\"));\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "d56a27b8-dccd-4686-ba17-917c9c235b0a",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"testuser@gmail.com\",\r\n    \"password\": \"password\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/auth/login"
											},
											"response": []
										},
										{
											"name": "Create new detail for order",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ce7a85ef-0f68-4dfe-987e-9c57c23e7371",
														"exec": [
															"pm.test(\"Status code correct.\", function () {",
															"    pm.response.to.have.status(200);",
															"    var jsonData = pm.response.json();",
															"    pm.collectionVariables.set(\"order-detail_id\",jsonData.id);",
															"});",
															"",
															"pm.test(\"Correct order id.\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.ordersId).to.eql(1);",
															"});",
															"",
															"pm.test(\"Correct product id.\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.productId).to.eql(1);",
															"});",
															"",
															"pm.test(\"Correct quantity.\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.quantity).to.eql(1.0);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "ec9c009f-436d-4d57-af8b-f2b846f17071",
											"protocolProfileBehavior": {
												"disableBodyPruning": true,
												"disabledSystemHeaders": {
													"connection": true
												}
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"productId\": 1,\n  \"orderId\": 1,\n  \"quantity\": 1\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/api/orderdetail"
											},
											"response": []
										},
										{
											"name": "get order details for specific id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "83ebe83a-42dc-4586-90ac-38e22e89ac3b",
														"exec": [
															"pm.test(\"Status code is correct.\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"firstname is correct.\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"Testerson\");",
															"});",
															"",
															"pm.test(\"lastname is correct.\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"Usertown\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "e07e46b0-590d-49ab-84e4-75af1f8ac304",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "{{Authorization}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/api/orderdetail/{{order-detail_id}}"
											},
											"response": []
										},
										{
											"name": "/api/orderdetail/{id}",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2a324cf7-88dd-4729-951f-35f731477f3d",
														"exec": [
															"pm.test(\"Correct status code.\", function () {",
															"    pm.response.to.have.status(200);",
															"    pm.collectionVariables.set(\"order-detail_id\",);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "061c27ad-bbb6-43f8-a1f2-619303cd6b2f",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "{{Authorization}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/api/orderdetail/{{order-detail_id}}"
											},
											"response": []
										},
										{
											"name": "check if detail was deleted",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "83ebe83a-42dc-4586-90ac-38e22e89ac3b",
														"exec": [
															"pm.test(\"Status code is correct.\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "1df6d9ae-fc98-443f-a877-30782b11277a",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "{{Authorization}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/api/orderdetail/{{order-detail_id}}"
											},
											"response": []
										}
									],
									"id": "432d0922-93be-49fc-b807-24044b3ccd52"
								},
								{
									"name": "Create new detail with invalid order idand check if it was created",
									"item": [
										{
											"name": "(testuser@gmail.com) http://localhost:8080/auth/login (testuser@gmail.com) Copy 4",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d65ba736-d351-4b25-9796-7e32b859411a",
														"exec": [
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.globals.set(\"Authorization\", pm.response.headers.get(\"Authorization\"));\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "04550a7d-8919-4f67-8d0e-b1c847cfbcf6",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"testuser@gmail.com\",\r\n    \"password\": \"password\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/auth/login"
											},
											"response": []
										},
										{
											"name": "Create new detail for order",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ce7a85ef-0f68-4dfe-987e-9c57c23e7371",
														"exec": [
															"pm.test(\"Status code correct.\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "38c4a7cf-fe3a-4d7a-8e96-4e523ed2b461",
											"protocolProfileBehavior": {
												"disableBodyPruning": true,
												"disabledSystemHeaders": {
													"connection": true
												}
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"productId\": 1,\n  \"orderId\": 100,\n  \"quantity\": 1\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/api/orderdetail"
											},
											"response": []
										},
										{
											"name": "get order details for specific id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "83ebe83a-42dc-4586-90ac-38e22e89ac3b",
														"exec": [
															"pm.test(\"Status code is correct.\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "ad1904a6-7e93-4872-9728-db0c2e7ce6a3",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "{{Authorization}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/api/orderdetail/{{order-detail_id}}"
											},
											"response": []
										}
									],
									"id": "3eec8c4e-639b-4898-b8f6-3da2b01698e3"
								},
								{
									"name": "Create new detail with invalid number of items",
									"item": [
										{
											"name": "(testuser@gmail.com) http://localhost:8080/auth/login (testuser@gmail.com) Copy 4",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d65ba736-d351-4b25-9796-7e32b859411a",
														"exec": [
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.globals.set(\"Authorization\", pm.response.headers.get(\"Authorization\"));\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "3d3b6a61-d9f8-43a1-a03a-1db05d070280",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"testuser@gmail.com\",\r\n    \"password\": \"password\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/auth/login"
											},
											"response": []
										},
										{
											"name": "Create new detail for order",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ce7a85ef-0f68-4dfe-987e-9c57c23e7371",
														"exec": [
															"pm.test(\"Status code correct.\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.collectionVariables.set(\"order-detail_id\",jsonData.id);",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "208dff2f-cdd1-45bc-968d-578325a019d9",
											"protocolProfileBehavior": {
												"disableBodyPruning": true,
												"disabledSystemHeaders": {
													"connection": true
												}
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"productId\": 1,\n  \"orderId\": 1,\n  \"quantity\": -1\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/api/orderdetail"
											},
											"response": []
										},
										{
											"name": "get order details for specific id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "83ebe83a-42dc-4586-90ac-38e22e89ac3b",
														"exec": [
															"pm.test(\"Status code is correct.\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "ee4de208-fe8d-442a-ab3d-c32f13f669a6",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "{{Authorization}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/api/orderdetail/{{order-detail_id}}"
											},
											"response": []
										}
									],
									"id": "8def9b96-c220-4c5d-93eb-204e54f47050"
								},
								{
									"name": "Create new detail with invalid string of items",
									"item": [
										{
											"name": "(testuser@gmail.com) http://localhost:8080/auth/login (testuser@gmail.com) Copy 4",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d65ba736-d351-4b25-9796-7e32b859411a",
														"exec": [
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.globals.set(\"Authorization\", pm.response.headers.get(\"Authorization\"));\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "f43adfdb-1a28-4179-9b0e-f632331e89e7",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"testuser@gmail.com\",\r\n    \"password\": \"password\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/auth/login"
											},
											"response": []
										},
										{
											"name": "Create new detail for order",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ce7a85ef-0f68-4dfe-987e-9c57c23e7371",
														"exec": [
															"pm.test(\"Status code correct.\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.collectionVariables.set(\"order-detail_id\",jsonData.id);",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "d7506ff7-4f86-49f3-a649-241ad2d7d648",
											"protocolProfileBehavior": {
												"disableBodyPruning": true,
												"disabledSystemHeaders": {
													"connection": true
												}
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"productId\": 1,\n  \"orderId\": 1,\n  \"quantity\": \"p\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/api/orderdetail"
											},
											"response": []
										},
										{
											"name": "get order details for specific id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "83ebe83a-42dc-4586-90ac-38e22e89ac3b",
														"exec": [
															"pm.test(\"Status code is correct.\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "c915fc93-cbd9-42c9-8ae0-d00e85474370",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "{{Authorization}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/api/orderdetail/{{order-detail_id}}"
											},
											"response": []
										}
									],
									"id": "37a2e231-dd0a-4b06-b650-eb4b3ca26424"
								},
								{
									"name": "Check all details for order",
									"item": [
										{
											"name": "(testuser@gmail.com) http://localhost:8080/auth/login (testuser@gmail.com) Copy 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d65ba736-d351-4b25-9796-7e32b859411a",
														"exec": [
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.globals.set(\"Authorization\", pm.response.headers.get(\"Authorization\"));\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "4c283abf-0510-494f-a4ea-8ce3261d5e16",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"testuser@gmail.com\",\r\n    \"password\": \"password\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/auth/login"
											},
											"response": []
										},
										{
											"name": "/api/orderdetail/order/{id}",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b2fcf61d-98e2-437a-8bcd-77e2517dada4",
														"exec": [
															"pm.test(\"Correct status code.\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															" ",
															"pm.test(\"Orders id  is correct.\", function () {",
															"    pm.expect(pm.response.json()[0].id).to.eq(2);",
															"});",
															"",
															"pm.test(\"Product id  is correct.\", function () {",
															"    pm.expect(pm.response.json()[0].productId).to.eq(1);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "5f6e76b3-6035-4064-afbc-51d82b031f28",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "{{Authorization}}",
														"type": "text"
													}
												],
												"url": "http://localhost:8080/api/orderdetail/order/2"
											},
											"response": []
										}
									],
									"id": "7c670eb3-e919-41f4-a3bb-0293c16cd1a4"
								}
							],
							"id": "57615560-ef11-482f-b064-7fe3555c34de"
						},
						{
							"name": "PaymentController Tests",
							"item": [
								{
									"name": "User creates valid card and delete after",
									"item": [
										{
											"name": "(testuser@gmail.com) http://localhost:8080/auth/login (testuser@gmail.com) Copy 4",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d65ba736-d351-4b25-9796-7e32b859411a",
														"exec": [
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.globals.set(\"Authorization\", pm.response.headers.get(\"Authorization\"));\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "0d09dc15-77c0-4058-ba38-22296b2cd131",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"testuser@gmail.com\",\r\n    \"password\": \"password\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/auth/login"
											},
											"response": []
										},
										{
											"name": "/api/payment",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "bf78b2e5-9a2b-4cf7-aae6-42d79766961e",
														"exec": [
															"pm.test(\"Correct status code.\", function () {",
															"    pm.response.to.have.status(200);",
															"    var jsonData = pm.response.json();",
															"    pm.collectionVariables.set(\"payment_id\",jsonData.id);",
															"});",
															"",
															"pm.test(\"Correct ccv\", function () {",
															"    pm.expect(jsonData.ccv).to.eql(\"123\");",
															"});",
															"",
															"pm.test(\"Correct userEmail\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.userEmail).to.eql(\"testuser@gmail.com\");",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "82c806eb-4149-4526-aa66-1d60f660df12",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{Authorization}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"ccv\": \"123\",\n  \"expDate\": \"2025-12-05\",\n  \"cardNumber\": \"0123456789111213\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/api/payment"
											},
											"response": []
										},
										{
											"name": "/api/payment",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8647b868-dc69-4702-80f9-3941510f63e2",
														"exec": [
															"pm.test(\"Correct status code.\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Correct JSON response body.\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"Payment \" + pm.collectionVariables.get(\"payment_id\") +",
															"    \" was deleted\");",
															"    pm.collectionVariables.set(\"payment_id\",);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "2d27d9f4-68f4-4a63-b84f-0fc1332ca522",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "{{Authorization}}",
														"type": "text"
													},
													{
														"key": "paymentId",
														"value": "\"10\"",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://localhost:8080/api/payment?paymentId={{payment_id}}",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8080",
													"path": [
														"api",
														"payment"
													],
													"query": [
														{
															"key": "paymentId",
															"value": "{{payment_id}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"id": "0865413f-cf05-4251-9caa-d78fdad27aa8"
								},
								{
									"name": "User creates invalid card",
									"item": [
										{
											"name": "(testuser@gmail.com) http://localhost:8080/auth/login (testuser@gmail.com) Copy 4",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d65ba736-d351-4b25-9796-7e32b859411a",
														"exec": [
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.globals.set(\"Authorization\", pm.response.headers.get(\"Authorization\"));\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "9bc859a5-f4dc-4782-99c4-0c18b0cb6877",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"testuser@gmail.com\",\r\n    \"password\": \"password\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/auth/login"
											},
											"response": []
										},
										{
											"name": "/api/payment",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "bf78b2e5-9a2b-4cf7-aae6-42d79766961e",
														"exec": [
															"pm.test(\"Correct status code.\", function () {",
															"    pm.response.to.have.status(400);",
															"    var jsonData = pm.response.json();",
															"    pm.collectionVariables.set(\"payment_id\",jsonData.id);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "c630f21d-11b0-4d8d-b4fa-3d52a30bb6c8",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{Authorization}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"ccv\": \"p\",\n  \"expDate\": \"2021-12-05\",\n  \"cardNumber\": \"dafbad\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/api/payment"
											},
											"response": []
										},
										{
											"name": "/api/payment",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8647b868-dc69-4702-80f9-3941510f63e2",
														"exec": [
															"pm.test(\"Correct status code.\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Correct JSON response body.\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"Payment \" + pm.collectionVariables.get(\"payment_id\") +",
															"    \" was deleted\");",
															"    pm.collectionVariables.set(\"payment_id\",);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "eabc6587-ee50-4012-9b60-83e95c583698",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "{{Authorization}}",
														"type": "text"
													},
													{
														"key": "paymentId",
														"value": "\"10\"",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://localhost:8080/api/payment?paymentId={{payment_id}}",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8080",
													"path": [
														"api",
														"payment"
													],
													"query": [
														{
															"key": "paymentId",
															"value": "{{payment_id}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"id": "e7c6d1d7-0826-478c-99a7-58dd6c35e997"
								},
								{
									"name": "User tries to create blank card",
									"item": [
										{
											"name": "(testuser@gmail.com) http://localhost:8080/auth/login (testuser@gmail.com)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d65ba736-d351-4b25-9796-7e32b859411a",
														"exec": [
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.globals.set(\"Authorization\", pm.response.headers.get(\"Authorization\"));\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "acc3b350-d292-4f39-a20f-ea8eef3a2b2b",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"testuser@gmail.com\",\r\n    \"password\": \"password\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/auth/login"
											},
											"response": []
										},
										{
											"name": "create blank payment",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "bf78b2e5-9a2b-4cf7-aae6-42d79766961e",
														"exec": [
															"pm.test(\"Correct status code.\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Correct ccv\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.ccv).to.eql(\"string\");",
															"});",
															"",
															"pm.test(\"Correct userEmail\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.userEmail).to.eql(\"testuser@gmail.com\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "6fce0613-7897-4d35-bbca-d390c62ac147",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{Authorization}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"ccv\": \"string\",\n  \"expDate\": \"2022-12-05T19:51:32.665Z\",\n  \"cardNumber\": \"string\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/api/payment"
											},
											"response": []
										}
									],
									"id": "f8e41353-adc4-4d7b-88f1-d3088313faa1"
								},
								{
									"name": "Update payment with valid input",
									"item": [
										{
											"name": "(testuser@gmail.com) http://localhost:8080/auth/login (testuser@gmail.com) Copy 4",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d65ba736-d351-4b25-9796-7e32b859411a",
														"exec": [
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.globals.set(\"Authorization\", pm.response.headers.get(\"Authorization\"));\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "ec657361-64e2-42a3-94fa-2477c0bb4344",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"testuser@gmail.com\",\r\n    \"password\": \"password\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/auth/login"
											},
											"response": []
										},
										{
											"name": "/api/payment",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "756974f2-ad64-4783-8053-57b97c69c58f",
														"exec": [
															"",
															"pm.test(\"Correct status code.\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Correct ccv.\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"string\");",
															"});",
															"",
															"pm.test(\"Correct card number.\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"string\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "47b7149d-a551-4c5e-b363-1a02ea240ecf",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "{{Authorization}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"paymentId\": \"3\",\n  \"cardType\": \"456\",\n  \"expDate\": \"2025-12-05\",\n  \"cardNumber\": \"0123456789101112\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/api/payment"
											},
											"response": []
										}
									],
									"id": "b54e5c1e-b463-4e8c-9a9e-4473beb7b29c"
								},
								{
									"name": "Update payment with invalid input Copy",
									"item": [
										{
											"name": "(testuser@gmail.com) http://localhost:8080/auth/login (testuser@gmail.com) Copy 4",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d65ba736-d351-4b25-9796-7e32b859411a",
														"exec": [
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.globals.set(\"Authorization\", pm.response.headers.get(\"Authorization\"));\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "6504a56f-5a52-46a9-988c-2857fb539a56",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"testuser@gmail.com\",\r\n    \"password\": \"password\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/auth/login"
											},
											"response": []
										},
										{
											"name": "/api/payment",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "756974f2-ad64-4783-8053-57b97c69c58f",
														"exec": [
															"",
															"pm.test(\"Correct status code.\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "15d81efa-a1d8-4509-96d3-7ad96a54b0f5",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "{{Authorization}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"paymentId\": \"3\",\n  \"cardType\": \"abc\",\n  \"expDate\": \"2021-12-05\",\n  \"cardNumber\": \"abcd\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/api/payment"
											},
											"response": []
										}
									],
									"id": "ae1d6d8a-1263-47ba-8b32-f70a2ffbd829"
								},
								{
									"name": "Update payment with blank input",
									"item": [
										{
											"name": "(testuser@gmail.com) http://localhost:8080/auth/login (testuser@gmail.com) Copy 4",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d65ba736-d351-4b25-9796-7e32b859411a",
														"exec": [
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.globals.set(\"Authorization\", pm.response.headers.get(\"Authorization\"));\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "1d09bc8e-b9bb-42d4-b18d-55fa67096410",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"testuser@gmail.com\",\r\n    \"password\": \"password\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/auth/login"
											},
											"response": []
										},
										{
											"name": "/api/payment",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "756974f2-ad64-4783-8053-57b97c69c58f",
														"exec": [
															"",
															"pm.test(\"Correct status code.\", function () {",
															"    pm.response.to.have.status(500);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "80de0860-3355-4819-96e0-6ffdce7c6415",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "{{Authorization}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"paymentId\": \"3\",\n  \"cardType\": \"\",\n  \"expDate\": \"\",\n  \"cardNumber\": \"\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/api/payment"
											},
											"response": []
										}
									],
									"id": "d598e959-3050-4c9b-9ac6-50b6ea015ce1"
								},
								{
									"name": "Check list of cards for user",
									"item": [
										{
											"name": "(testuser@gmail.com) http://localhost:8080/auth/login (testuser@gmail.com) Copy 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d65ba736-d351-4b25-9796-7e32b859411a",
														"exec": [
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.globals.set(\"Authorization\", pm.response.headers.get(\"Authorization\"));\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "d8b89bd4-cd3d-4870-9cc4-b0ff99495ee6",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"testuser@gmail.com\",\r\n    \"password\": \"password\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/auth/login"
											},
											"response": []
										},
										{
											"name": "/api/payment",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b8b0c2b8-3bf3-48ff-af1d-d84e88fb6b91",
														"exec": [
															"pm.test(\"Status code is correct.\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response body is correct.\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"safecard111\");",
															"});",
															"",
															"pm.test(\"Cvv correct.\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[0].ccv).to.eql(\"123\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "b24ee003-6d34-4fdc-9148-72f00635ac56",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "{{Authorization}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "http://localhost:8080/api/payment",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8080",
													"path": [
														"api",
														"payment"
													],
													"query": [
														{
															"key": "",
															"value": null,
															"type": "text",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									],
									"id": "136316bd-0c95-4527-8b87-d6d149e66987"
								},
								{
									"name": "Delete nonexistent payment",
									"item": [
										{
											"name": "(testuser@gmail.com) http://localhost:8080/auth/login (testuser@gmail.com) Copy 5",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d65ba736-d351-4b25-9796-7e32b859411a",
														"exec": [
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.globals.set(\"Authorization\", pm.response.headers.get(\"Authorization\"));\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "f71f96c3-b885-40a5-861e-2cfd323533c2",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"testuser@gmail.com\",\r\n    \"password\": \"password\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "http://localhost:8080/auth/login"
											},
											"response": []
										},
										{
											"name": "/api/payment",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8647b868-dc69-4702-80f9-3941510f63e2",
														"exec": [
															"pm.test(\"Correct status code.\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Correct JSON response body.\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"Resource could not be found in the database\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "7b3ec26b-6849-473f-be11-fe07409e70b4",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "{{Authorization}}",
														"type": "text"
													},
													{
														"key": "paymentId",
														"value": "\"10\"",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://localhost:8080/api/payment?paymentId=0",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8080",
													"path": [
														"api",
														"payment"
													],
													"query": [
														{
															"key": "paymentId",
															"value": "0"
														}
													]
												}
											},
											"response": []
										}
									],
									"id": "df076033-06c1-4b7e-88d3-c50cb249dfa6"
								}
							],
							"id": "771e81c1-063e-4c66-b37b-d1a6eecce54d"
						}
					],
					"id": "42eaeadb-ebe1-4b62-b333-972337297911"
				}
			],
			"id": "9ae5b629-2b65-4f20-812a-4f56c805c452"
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": {
			"value": "{{Authorization}}",
			"key": "Authorization"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "68723746-594b-4079-85d6-ee164395e9c4",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "13d63b46-68a9-4fcc-9307-0b25018a5561",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "0691eb6c-238c-4b85-9154-a30b6d225640",
			"key": "productKeyword",
			"value": "keyword"
		},
		{
			"id": "810e3c86-8170-4ab3-bb39-a87a3d63f562",
			"key": "productID",
			"value": "id"
		},
		{
			"id": "0cb4f405-784f-48ac-93b0-39813bb7edd8",
			"key": "keyword",
			"value": ""
		},
		{
			"id": "fbbf211f-b535-4a4b-90fb-223b497aae1b",
			"key": "productPostID",
			"value": ""
		},
		{
			"id": "8d19c8e6-0650-4413-a29e-233252c96cd2",
			"key": "productUserID",
			"value": ""
		},
		{
			"id": "d02f1176-10b1-46b0-a487-04fe9ff80abf",
			"key": "productRating",
			"value": ""
		},
		{
			"id": "98330611-6022-4214-a341-a27790798877",
			"key": "payment_id",
			"value": ""
		},
		{
			"id": "3619054b-b848-4a5d-a4cc-a2a9e1637485",
			"key": "order-detail_id",
			"value": ""
		}
	]
}